url,name,signature,description
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html#numpy.add","numpy.add","numpy.add(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'add'>","Add arguments element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.add.html#numpy.char.add","numpy.char.add","numpy.char.add(x1\, x2)","Return element-wise string concatenation for two arrays of str or unicode."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.all.html#numpy.ma.all","numpy.ma.all","numpy.ma.all(self\, axis=None\, out=None\, keepdims=<no value>) = <numpy.ma.core._frommethod object>","Returns True if all elements evaluate to True."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.all.html#numpy.all","numpy.all","numpy.all(a\, axis=None\, out=None\, keepdims=<no value>)","Test whether all array elements along a given axis evaluate to True."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.all_strings.html#numpy.distutils.misc_util.all_strings","numpy.distutils.misc_util.all_strings","numpy.distutils.misc_util.all_strings(lst)","Return True if all items in lst are string objects."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.allclose.html#numpy.allclose","numpy.allclose","numpy.allclose(a\, b\, rtol=1e-05\, atol=1e-08\, equal_nan=False)","Returns True if two arrays are element-wise equal within a tolerance."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.allclose.html#numpy.ma.allclose","numpy.ma.allclose","numpy.ma.allclose(a\, b\, masked_equal=True\, rtol=1e-05\, atol=1e-08)","Returns True if two arrays are element-wise equal within a tolerance."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.allequal.html#numpy.ma.allequal","numpy.ma.allequal","numpy.ma.allequal(a\, b\, fill_value=True)","Return True if all entries of a and b are equal\, using fill_value as a truth value where either or both are masked."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.allpath.html#numpy.distutils.misc_util.allpath","numpy.distutils.misc_util.allpath","numpy.distutils.misc_util.allpath(name)","Convert a /-separated pathname to one using the OS’s path separator."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html#numpy.amax","numpy.amax","numpy.amax(a\, axis=None\, out=None\, keepdims=<no value>\, initial=<no value>\, where=<no value>)","Return the maximum of an array or maximum along an axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html#numpy.amin","numpy.amin","numpy.amin(a\, axis=None\, out=None\, keepdims=<no value>\, initial=<no value>\, where=<no value>)","Return the minimum of an array or minimum along an axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.angle.html#numpy.angle","numpy.angle","numpy.angle(z\, deg=False)","Return the angle of the complex argument."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.anom.html#numpy.ma.anom","numpy.ma.anom","numpy.ma.anom(self\, axis=None\, dtype=None) = <numpy.ma.core._frommethod object>","Compute the anomalies (deviations from the arithmetic mean) along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.anomalies.html#numpy.ma.anomalies","numpy.ma.anomalies","numpy.ma.anomalies(self\, axis=None\, dtype=None) = <numpy.ma.core._frommethod object>","Compute the anomalies (deviations from the arithmetic mean) along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.any.html#numpy.ma.any","numpy.ma.any","numpy.ma.any(self\, axis=None\, out=None\, keepdims=<no value>) = <numpy.ma.core._frommethod object>","Returns True if any of the elements of a evaluate to True."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.any.html#numpy.any","numpy.any","numpy.any(a\, axis=None\, out=None\, keepdims=<no value>)","Test whether any array element along a given axis evaluates to True."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.append.html#numpy.append","numpy.append","numpy.append(arr\, values\, axis=None)","Append values to the end of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.append.html#numpy.ma.append","numpy.ma.append","numpy.ma.append(a\, b\, axis=None)","Append values to the end of an array."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.appendpath.html#numpy.distutils.misc_util.appendpath","numpy.distutils.misc_util.appendpath","numpy.distutils.misc_util.appendpath(prefix\, path)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis","numpy.apply_along_axis","numpy.apply_along_axis(func1d\, axis\, arr\, *args\, **kwargs)","Apply a function to 1-D slices along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis","numpy.ma.apply_along_axis","numpy.ma.apply_along_axis(func1d\, axis\, arr\, *args\, **kwargs)","Apply a function to 1-D slices along the given axis."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.apply_along_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.apply_over_axes.html#numpy.apply_over_axes","numpy.apply_over_axes","numpy.apply_over_axes(func\, a\, axes)","Apply a function repeatedly over multiple axes."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.arange.html#numpy.ma.arange","numpy.ma.arange","numpy.ma.arange([start\, ]stop\, [step\, ]dtype=None) = <numpy.ma.core._convert2ma object>","Return evenly spaced values within a given interval."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html#numpy.arange","numpy.arange","numpy.arange([start\, ]stop\, [step\, ]dtype=None)","Return evenly spaced values within a given interval."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arccos.html#numpy.arccos","numpy.arccos","numpy.arccos(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'arccos'>","Trigonometric inverse cosine\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arccosh.html#numpy.arccosh","numpy.arccosh","numpy.arccosh(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'arccosh'>","Inverse hyperbolic cosine\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arcsin.html#numpy.arcsin","numpy.arcsin","numpy.arcsin(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'arcsin'>","Inverse sine\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arcsinh.html#numpy.arcsinh","numpy.arcsinh","numpy.arcsinh(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'arcsinh'>","Inverse hyperbolic sine element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan.html#numpy.arctan","numpy.arctan","numpy.arctan(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'arctan'>","Trigonometric inverse tangent\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan2.html#numpy.arctan2","numpy.arctan2","numpy.arctan2(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'arctan2'>","Element-wise arc tangent of x1/x2 choosing the quadrant correctly."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctanh.html#numpy.arctanh","numpy.arctanh","numpy.arctanh(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'arctanh'>","Inverse hyperbolic tangent element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.argmax.html#numpy.ma.argmax","numpy.ma.argmax","numpy.ma.argmax(self\, axis=None\, fill_value=None\, out=None) = <numpy.ma.core._frommethod object>","Returns array of indices of the maximum values along the given axis. Masked values are treated as if they had the value fill_value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html#numpy.argmax","numpy.argmax","numpy.argmax(a\, axis=None\, out=None)","Returns the indices of the maximum values along an axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.argmin.html#numpy.ma.argmin","numpy.ma.argmin","numpy.ma.argmin(self\, axis=None\, fill_value=None\, out=None) = <numpy.ma.core._frommethod object>","Return array of indices to the minimum values along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html#numpy.argmin","numpy.argmin","numpy.argmin(a\, axis=None\, out=None)","Returns the indices of the minimum values along an axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argpartition.html#numpy.argpartition","numpy.argpartition","numpy.argpartition(a\, kth\, axis=-1\, kind='introselect'\, order=None)","Perform an indirect partition along the given axis using the algorithm specified by the kind keyword. It returns an array of indices of the same shape as a that index data along the given axis in partitioned order."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html#numpy.argsort","numpy.argsort","numpy.argsort(a\, axis=-1\, kind=None\, order=None)","Returns the indices that would sort an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.argsort.html#numpy.ma.argsort","numpy.ma.argsort","numpy.ma.argsort(a\, axis=<no value>\, kind=None\, order=None\, endwith=True\, fill_value=None)","Return an ndarray of indices that sort the array along the specified axis.  Masked values are filled beforehand to fill_value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.argwhere.html#numpy.argwhere","numpy.argwhere","numpy.argwhere(a)","Find the indices of array elements that are non-zero\, grouped by element."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.around.html#numpy.ma.around","numpy.ma.around","numpy.ma.around(a\, *args\, **kwargs) = <numpy.ma.core._MaskedUnaryOperation object>","Round an array to the given number of decimals."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html#numpy.around","numpy.around","numpy.around(a\, decimals=0\, out=None)","Evenly round to the given number of decimals."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html#numpy.array","numpy.array","numpy.array(object\, dtype=None\, copy=True\, order='K'\, subok=False\, ndmin=0)","Create an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.array.html#numpy.char.array","numpy.char.array","numpy.char.array(obj\, itemsize=None\, copy=True\, unicode=None\, order=None)","Create a chararray."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.defchararray.array.html#numpy.core.defchararray.array","numpy.core.defchararray.array","numpy.core.defchararray.array(obj\, itemsize=None\, copy=True\, unicode=None\, order=None)","Create a chararray."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.array.html#numpy.core.records.array","numpy.core.records.array","numpy.core.records.array(obj\, dtype=None\, shape=None\, offset=0\, strides=None\, formats=None\, names=None\, titles=None\, aligned=False\, byteorder=None\, copy=True)","Construct a record array from a wide-variety of objects."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.array.html#numpy.ma.array","numpy.ma.array","numpy.ma.array(data\, dtype=None\, copy=False\, order=None\, mask=False\, fill_value=None\, keep_mask=True\, hard_mask=False\, shrink=True\, subok=True\, ndmin=0)","An array class with possibly masked values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array2string.html#numpy.array2string","numpy.array2string","numpy.array2string(a\, max_line_width=None\, precision=None\, suppress_small=None\, separator=' '\, prefix=''\, style=<no value>\, formatter=None\, threshold=None\, edgeitems=None\, sign=None\, floatmode=None\, suffix=''\, **kwarg)","Return a string representation of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_equal.html#numpy.array_equal","numpy.array_equal","numpy.array_equal(a1\, a2)","True if two arrays have the same shape and elements\, False otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_equiv.html#numpy.array_equiv","numpy.array_equiv","numpy.array_equiv(a1\, a2)","Returns True if input arrays are shape consistent and all elements equal."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_repr.html#numpy.array_repr","numpy.array_repr","numpy.array_repr(arr\, max_line_width=None\, precision=None\, suppress_small=None)","Return the string representation of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_split.html#numpy.array_split","numpy.array_split","numpy.array_split(ary\, indices_or_sections\, axis=0)","Split an array into multiple sub-arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_str.html#numpy.array_str","numpy.array_str","numpy.array_str(a\, max_line_width=None\, precision=None\, suppress_small=None)","Return a string representation of the data in an array."
"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.as_array","numpy.ctypeslib.as_array","numpy.ctypeslib.as_array(obj\, shape=None)","Create a numpy array from a ctypes array or POINTER."
"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes","numpy.ctypeslib.as_array","numpy.ctypeslib.as_array(obj\, shape=None)","Create a numpy array from a ctypes array or POINTER."
"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes_type","numpy.ctypeslib.as_array","numpy.ctypeslib.as_array(obj\, shape=None)","Create a numpy array from a ctypes array or POINTER."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.as_series.html#numpy.polynomial.polyutils.as_series","numpy.polynomial.polyutils.as_series","numpy.polynomial.polyutils.as_series(alist\, trim=True)","Return argument as a list of 1-d arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lib.stride_tricks.as_strided.html#numpy.lib.stride_tricks.as_strided","numpy.lib.stride_tricks.as_strided","numpy.lib.stride_tricks.as_strided(x\, shape=None\, strides=None\, subok=False\, writeable=True)","Create a view into the array with the given shape and strides."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asanyarray.html#numpy.asanyarray","numpy.asanyarray","numpy.asanyarray(a\, dtype=None\, order=None)","Convert the input to an ndarray\, but pass ndarray subclasses through."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray","numpy.ma.asanyarray","numpy.ma.asanyarray(a\, dtype=None)","Convert the input to a masked array\, conserving subclasses."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asarray.html#numpy.asarray","numpy.asarray","numpy.asarray(a\, dtype=None\, order=None)","Convert the input to an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.asarray.html#numpy.char.asarray","numpy.char.asarray","numpy.char.asarray(obj\, itemsize=None\, unicode=None\, order=None)","Convert the input to a chararray\, copying the data only if necessary."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.defchararray.asarray.html#numpy.core.defchararray.asarray","numpy.core.defchararray.asarray","numpy.core.defchararray.asarray(obj\, itemsize=None\, unicode=None\, order=None)","Convert the input to a chararray\, copying the data only if necessary."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.asarray.html#numpy.ma.asarray","numpy.ma.asarray","numpy.ma.asarray(a\, dtype=None\, order=None)","Convert the input to a masked array of the given data-type."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asarray_chkfinite.html#numpy.asarray_chkfinite","numpy.asarray_chkfinite","numpy.asarray_chkfinite(a\, dtype=None\, order=None)","Convert the input to an array\, checking for NaNs or Infs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray","numpy.ascontiguousarray","numpy.ascontiguousarray(a\, dtype=None)","Return a contiguous array (ndim >= 1) in memory (C order)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asfarray.html#numpy.asfarray","numpy.asfarray","numpy.asfarray(a\, dtype=<class 'numpy.float64'>)","Return an array converted to a float type."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asfortranarray.html#numpy.asfortranarray","numpy.asfortranarray","numpy.asfortranarray(a\, dtype=None)","Return an array (ndim >= 1) laid out in Fortran order in memory."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asmatrix.html#numpy.asmatrix","numpy.asmatrix","numpy.asmatrix(data\, dtype=None)","Interpret the input as a matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.asscalar.html#numpy.asscalar","numpy.asscalar","numpy.asscalar(a)","Convert an array of size 1 to its scalar equivalent."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose","numpy.testing.assert_allclose","numpy.testing.assert_allclose(actual\, desired\, rtol=1e-07\, atol=0\, equal_nan=True\, err_msg=''\, verbose=True)","Raises an AssertionError if two objects are not equal up to desired tolerance."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_almost_equal.html#numpy.testing.assert_almost_equal","numpy.testing.assert_almost_equal","numpy.testing.assert_almost_equal(actual\, desired\, decimal=7\, err_msg=''\, verbose=True)","Raises an AssertionError if two items are not equal up to desired precision."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_approx_equal.html#numpy.testing.assert_approx_equal","numpy.testing.assert_approx_equal","numpy.testing.assert_approx_equal(actual\, desired\, significant=7\, err_msg=''\, verbose=True)","Raises an AssertionError if two items are not equal up to significant digits."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_almost_equal.html#numpy.testing.assert_array_almost_equal","numpy.testing.assert_array_almost_equal","numpy.testing.assert_array_almost_equal(x\, y\, decimal=6\, err_msg=''\, verbose=True)","Raises an AssertionError if two objects are not equal up to desired precision."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp","numpy.testing.assert_array_almost_equal_nulp","numpy.testing.assert_array_almost_equal_nulp(x\, y\, nulp=1)","Compare two arrays relatively to their spacing."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_equal.html#numpy.testing.assert_array_equal","numpy.testing.assert_array_equal","numpy.testing.assert_array_equal(x\, y\, err_msg=''\, verbose=True)","Raises an AssertionError if two array_like objects are not equal."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_less.html#numpy.testing.assert_array_less","numpy.testing.assert_array_less","numpy.testing.assert_array_less(x\, y\, err_msg=''\, verbose=True)","Raises an AssertionError if two array_like objects are not ordered by less than."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp","numpy.testing.assert_array_max_ulp","numpy.testing.assert_array_max_ulp(a\, b\, maxulp=1\, dtype=None)","Check that all items of arrays differ in at most N Units in the Last Place."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_equal.html#numpy.testing.assert_equal","numpy.testing.assert_equal","numpy.testing.assert_equal(actual\, desired\, err_msg=''\, verbose=True)","Raises an AssertionError if two objects are not equal."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises","numpy.testing.assert_raises","numpy.testing.assert_raises(exception_class\, callable\, *args\, **kwargs) assert_raises(exception_class)","Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs. If a different type of exception is thrown\, it will not be caught\, and the test case will be deemed to have suffered an error\, exactly as for an unexpected exception."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_raises_regex.html#numpy.testing.assert_raises_regex","numpy.testing.assert_raises_regex","numpy.testing.assert_raises_regex(exception_class\, expected_regexp\, callable\, *args\, **kwargs) assert_raises_regex(exception_class\, expected_regexp)","Fail unless an exception of class exception_class and with message that matches expected_regexp is thrown by callable when invoked with arguments args and keyword arguments kwargs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_string_equal.html#numpy.testing.assert_string_equal","numpy.testing.assert_string_equal","numpy.testing.assert_string_equal(actual\, desired)","Test if two strings are equal."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns","numpy.testing.assert_warns","numpy.testing.assert_warns(warning_class\, *args\, **kwargs)","Fail unless the given callable throws the specified warning."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.assign_fields_by_name","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d","numpy.ma.atleast_1d","numpy.ma.atleast_1d(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_allargs object>","Convert inputs to arrays with at least one dimension. Scalar inputs are converted to 1-dimensional arrays\, whilst higher-dimensional inputs are preserved. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_1d.html#numpy.atleast_1d","numpy.atleast_1d","numpy.atleast_1d(*arys)","Convert inputs to arrays with at least one dimension."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d","numpy.ma.atleast_2d","numpy.ma.atleast_2d(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_allargs object>","View inputs as arrays with at least two dimensions."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_2d.html#numpy.atleast_2d","numpy.atleast_2d","numpy.atleast_2d(*arys)","View inputs as arrays with at least two dimensions."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d","numpy.ma.atleast_3d","numpy.ma.atleast_3d(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_allargs object>","View inputs as arrays with at least three dimensions."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_3d.html#numpy.atleast_3d","numpy.atleast_3d","numpy.atleast_3d(*arys)","View inputs as arrays with at least three dimensions."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.average.html#numpy.average","numpy.average","numpy.average(a\, axis=None\, weights=None\, returned=False)","Compute the weighted average along the specified axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.average.html#numpy.ma.average","numpy.ma.average","numpy.ma.average(a\, axis=None\, weights=None\, returned=False)","Return the weighted average of array over the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bartlett.html#numpy.bartlett","numpy.bartlett","numpy.bartlett(M)","Return the Bartlett window."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.base_repr.html#numpy.base_repr","numpy.base_repr","numpy.base_repr(number\, base=2\, padding=0)","Return a string representation of a number in the given base system."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.binary_repr.html#numpy.binary_repr","numpy.binary_repr","numpy.binary_repr(num\, width=None)","Return the binary representation of the input number as a string."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html#numpy.bincount","numpy.bincount","numpy.bincount(x\, weights=None\, minlength=0)","Count number of occurrences of each value in array of non-negative ints."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_and.html#numpy.bitwise_and","numpy.bitwise_and","numpy.bitwise_and(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'bitwise_and'>","Compute the bit-wise AND of two arrays element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_or.html#numpy.bitwise_or","numpy.bitwise_or","numpy.bitwise_or(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'bitwise_or'>","Compute the bit-wise OR of two arrays element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_xor.html#numpy.bitwise_xor","numpy.bitwise_xor","numpy.bitwise_xor(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'bitwise_xor'>","Compute the bit-wise XOR of two arrays element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.blackman.html#numpy.blackman","numpy.blackman","numpy.blackman(M)","Return the Blackman window."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.block.html#numpy.block","numpy.block","numpy.block(arrays)","Assemble an nd-array from nested lists of blocks."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.blue_text.html#numpy.distutils.misc_util.blue_text","numpy.distutils.misc_util.blue_text","numpy.distutils.misc_util.blue_text(s)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bmat.html#numpy.bmat","numpy.bmat","numpy.bmat(obj\, ldict=None\, gdict=None)","Build a matrix object from a string\, nested sequence\, or array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays","numpy.broadcast_arrays","numpy.broadcast_arrays(*args\, **kwargs)","Broadcast any number of arrays against each other."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html#numpy.broadcast_to","numpy.broadcast_to","numpy.broadcast_to(array\, shape\, subok=False)","Broadcast an array to a new shape."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.busday_count.html#numpy.busday_count","numpy.busday_count","numpy.busday_count(begindates\, enddates\, weekmask='1111100'\, holidays=[]\, busdaycal=None\, out=None)","Counts the number of valid days between begindates and enddates\, not including the day of enddates."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.busday_offset.html#numpy.busday_offset","numpy.busday_offset","numpy.busday_offset(dates\, offsets\, roll='raise'\, weekmask='1111100'\, holidays=None\, busdaycal=None\, out=None)","First adjusts the date to fall on a valid day according to the roll rule\, then applies offsets to the given dates counted in valid days."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.can_cast.html#numpy.can_cast","numpy.can_cast","numpy.can_cast(from_\, to\, casting='safe')","Returns True if cast between data types can occur according to the casting rule.  If from is a scalar or array scalar\, also returns True if the scalar value can be cast without overflow or truncation to an integer."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.capitalize.html#numpy.char.capitalize","numpy.char.capitalize","numpy.char.capitalize(a)","Return a copy of a with only the first character of each element capitalized."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cbrt.html#numpy.cbrt","numpy.cbrt","numpy.cbrt(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'cbrt'>","Return the cube-root of an array\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ceil.html#numpy.ceil","numpy.ceil","numpy.ceil(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'ceil'>","Return the ceiling of the input\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.center.html#numpy.char.center","numpy.char.center","numpy.char.center(a\, width\, fillchar=' ')","Return a copy of a with its elements centered in a string of length width."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.cheb2poly.html#numpy.polynomial.chebyshev.cheb2poly","numpy.polynomial.chebyshev.cheb2poly","numpy.polynomial.chebyshev.cheb2poly(c)","Convert a Chebyshev series to a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebadd.html#numpy.polynomial.chebyshev.chebadd","numpy.polynomial.chebyshev.chebadd","numpy.polynomial.chebyshev.chebadd(c1\, c2)","Add one Chebyshev series to another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebcompanion.html#numpy.polynomial.chebyshev.chebcompanion","numpy.polynomial.chebyshev.chebcompanion","numpy.polynomial.chebyshev.chebcompanion(c)","Return the scaled companion matrix of c."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebder.html#numpy.polynomial.chebyshev.chebder","numpy.polynomial.chebyshev.chebder","numpy.polynomial.chebyshev.chebder(c\, m=1\, scl=1\, axis=0)","Differentiate a Chebyshev series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebdiv.html#numpy.polynomial.chebyshev.chebdiv","numpy.polynomial.chebyshev.chebdiv","numpy.polynomial.chebyshev.chebdiv(c1\, c2)","Divide one Chebyshev series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebdomain.html#numpy.polynomial.chebyshev.chebdomain","numpy.polynomial.chebyshev.chebdomain = array","numpy.polynomial.chebyshev.chebdomain = array([-1\,  1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebfit.html#numpy.polynomial.chebyshev.chebfit","numpy.polynomial.chebyshev.chebfit","numpy.polynomial.chebyshev.chebfit(x\, y\, deg\, rcond=None\, full=False\, w=None)","Least squares fit of Chebyshev series to data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebfromroots.html#numpy.polynomial.chebyshev.chebfromroots","numpy.polynomial.chebyshev.chebfromroots","numpy.polynomial.chebyshev.chebfromroots(roots)","Generate a Chebyshev series with given roots."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebgauss.html#numpy.polynomial.chebyshev.chebgauss","numpy.polynomial.chebyshev.chebgauss","numpy.polynomial.chebyshev.chebgauss(deg)","Gauss-Chebyshev quadrature."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebgrid2d.html#numpy.polynomial.chebyshev.chebgrid2d","numpy.polynomial.chebyshev.chebgrid2d","numpy.polynomial.chebyshev.chebgrid2d(x\, y\, c)","Evaluate a 2-D Chebyshev series on the Cartesian product of x and y."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebgrid3d.html#numpy.polynomial.chebyshev.chebgrid3d","numpy.polynomial.chebyshev.chebgrid3d","numpy.polynomial.chebyshev.chebgrid3d(x\, y\, z\, c)","Evaluate a 3-D Chebyshev series on the Cartesian product of x\, y\, and z."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebint.html#numpy.polynomial.chebyshev.chebint","numpy.polynomial.chebyshev.chebint","numpy.polynomial.chebyshev.chebint(c\, m=1\, k=[]\, lbnd=0\, scl=1\, axis=0)","Integrate a Chebyshev series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebline.html#numpy.polynomial.chebyshev.chebline","numpy.polynomial.chebyshev.chebline","numpy.polynomial.chebyshev.chebline(off\, scl)","Chebyshev series whose graph is a straight line."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebmul.html#numpy.polynomial.chebyshev.chebmul","numpy.polynomial.chebyshev.chebmul","numpy.polynomial.chebyshev.chebmul(c1\, c2)","Multiply one Chebyshev series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebmulx.html#numpy.polynomial.chebyshev.chebmulx","numpy.polynomial.chebyshev.chebmulx","numpy.polynomial.chebyshev.chebmulx(c)","Multiply a Chebyshev series by x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebone.html#numpy.polynomial.chebyshev.chebone","numpy.polynomial.chebyshev.chebone = array","numpy.polynomial.chebyshev.chebone = array([1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebpow.html#numpy.polynomial.chebyshev.chebpow","numpy.polynomial.chebyshev.chebpow","numpy.polynomial.chebyshev.chebpow(c\, pow\, maxpower=16)","Raise a Chebyshev series to a power."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebroots.html#numpy.polynomial.chebyshev.chebroots","numpy.polynomial.chebyshev.chebroots","numpy.polynomial.chebyshev.chebroots(c)","Compute the roots of a Chebyshev series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebsub.html#numpy.polynomial.chebyshev.chebsub","numpy.polynomial.chebyshev.chebsub","numpy.polynomial.chebyshev.chebsub(c1\, c2)","Subtract one Chebyshev series from another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebtrim.html#numpy.polynomial.chebyshev.chebtrim","numpy.polynomial.chebyshev.chebtrim","numpy.polynomial.chebyshev.chebtrim(c\, tol=0)","Remove “small” “trailing” coefficients from a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebval.html#numpy.polynomial.chebyshev.chebval","numpy.polynomial.chebyshev.chebval","numpy.polynomial.chebyshev.chebval(x\, c\, tensor=True)","Evaluate a Chebyshev series at points x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebval2d.html#numpy.polynomial.chebyshev.chebval2d","numpy.polynomial.chebyshev.chebval2d","numpy.polynomial.chebyshev.chebval2d(x\, y\, c)","Evaluate a 2-D Chebyshev series at points (x\, y)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebval3d.html#numpy.polynomial.chebyshev.chebval3d","numpy.polynomial.chebyshev.chebval3d","numpy.polynomial.chebyshev.chebval3d(x\, y\, z\, c)","Evaluate a 3-D Chebyshev series at points (x\, y\, z)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebvander.html#numpy.polynomial.chebyshev.chebvander","numpy.polynomial.chebyshev.chebvander","numpy.polynomial.chebyshev.chebvander(x\, deg)","Pseudo-Vandermonde matrix of given degree."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebvander2d.html#numpy.polynomial.chebyshev.chebvander2d","numpy.polynomial.chebyshev.chebvander2d","numpy.polynomial.chebyshev.chebvander2d(x\, y\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebvander3d.html#numpy.polynomial.chebyshev.chebvander3d","numpy.polynomial.chebyshev.chebvander3d","numpy.polynomial.chebyshev.chebvander3d(x\, y\, z\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebweight.html#numpy.polynomial.chebyshev.chebweight","numpy.polynomial.chebyshev.chebweight","numpy.polynomial.chebyshev.chebweight(x)","The weight function of the Chebyshev polynomials."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebx.html#numpy.polynomial.chebyshev.chebx","numpy.polynomial.chebyshev.chebx = array","numpy.polynomial.chebyshev.chebx = array([0\, 1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.chebzero.html#numpy.polynomial.chebyshev.chebzero","numpy.polynomial.chebyshev.chebzero = array","numpy.polynomial.chebyshev.chebzero = array([0])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky","numpy.linalg.cholesky","numpy.linalg.cholesky(a)","Cholesky decomposition."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.choose.html#numpy.choose","numpy.choose","numpy.choose(a\, choices\, out=None\, mode='raise')","Construct an array from an index array and a set of arrays to choose from."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.choose.html#numpy.ma.choose","numpy.ma.choose","numpy.ma.choose(indices\, choices\, out=None\, mode='raise')","Use an index array to construct a new array from a set of choices."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.clip.html#numpy.clip","numpy.clip","numpy.clip(a\, a_min\, a_max\, out=None\, **kwargs)","Clip (limit) the values in an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.clip.html#numpy.ma.clip","numpy.ma.clip","numpy.ma.clip(a\, a_min\, a_max\, out=None\, **kwargs)","Clip (limit) the values in an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked","numpy.ma.clump_masked","numpy.ma.clump_masked(a)","Returns a list of slices corresponding to the masked clumps of a 1-D array. (A “clump” is defined as a contiguous region of the array)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked","numpy.ma.clump_unmasked","numpy.ma.clump_unmasked(a)","Return list of slices corresponding to the unmasked clumps of a 1-D array. (A “clump” is defined as a contiguous region of the array)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.column_stack.html#numpy.ma.column_stack","numpy.ma.column_stack","numpy.ma.column_stack(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","Stack 1-D arrays as columns into a 2-D array. Take a sequence of 1-D arrays and stack them as columns to make a single 2-D array. 2-D arrays are stacked as-is\, just like with hstack.  1-D arrays are turned into 2-D columns first. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html#numpy.column_stack","numpy.column_stack","numpy.column_stack(tup)","Stack 1-D arrays as columns into a 2-D array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value","numpy.ma.common_fill_value","numpy.ma.common_fill_value(a\, b)","Return the common filling value of two masked arrays\, if any."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.common_type.html#numpy.common_type","numpy.common_type","numpy.common_type(*arrays)","Return a scalar type which is common to the input arrays."
"https://docs.scipy.org/doc/numpy/f2py/usage.html#numpy.f2py.compile","numpy.f2py.run_main","numpy.f2py.run_main(comline_list)","Equivalent to running:"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.compress.html#numpy.compress","numpy.compress","numpy.compress(condition\, a\, axis=None\, out=None)","Return selected slices of an array along given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols","numpy.ma.compress_cols","numpy.ma.compress_cols(a)","Suppress whole columns of a 2-D array that contain masked values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols","numpy.ma.compress_rowcols","numpy.ma.compress_rowcols(x\, axis=None)","Suppress the rows and/or columns of a 2-D array that contain masked values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows","numpy.ma.compress_rows","numpy.ma.compress_rows(a)","Suppress whole rows of a 2-D array that contain masked values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.compressed.html#numpy.ma.compressed","numpy.ma.compressed","numpy.ma.compressed(x)","Return all the non-masked data as a 1-D array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html#numpy.concatenate","numpy.concatenate","numpy.concatenate((a1\, a2\, ...)\, axis=0\, out=None)","Join a sequence of arrays along an existing axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.concatenate.html#numpy.ma.concatenate","numpy.ma.concatenate","numpy.ma.concatenate(arrays\, axis=0)","Concatenate a sequence of arrays along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.cond.html#numpy.linalg.cond","numpy.linalg.cond","numpy.linalg.cond(x\, p=None)","Compute the condition number of a matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.conj.html#numpy.conj","numpy.conj","numpy.conj(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'conjugate'>","Return the complex conjugate\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.conjugate.html#numpy.conjugate","numpy.conjugate","numpy.conjugate(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'conjugate'>","Return the complex conjugate\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.conjugate.html#numpy.ma.conjugate","numpy.ma.conjugate","numpy.ma.conjugate(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <numpy.ma.core._MaskedUnaryOperation object>","Return the complex conjugate\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.convolve.html#numpy.convolve","numpy.convolve","numpy.convolve(a\, v\, mode='full')","Returns the discrete\, linear convolution of two one-dimensional sequences."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.copy.html#numpy.ma.copy","numpy.ma.copy","numpy.ma.copy(self\, *args\, **params) a.copy(order='C') = <numpy.ma.core._frommethod object>","Return a copy of the array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.copy.html#numpy.copy","numpy.copy","numpy.copy(a\, order='K')","Return an array copy of the given object."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.copysign.html#numpy.copysign","numpy.copysign","numpy.copysign(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'copysign'>","Change the sign of x1 to that of x2\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.copyto.html#numpy.copyto","numpy.copyto","numpy.copyto(dst\, src\, casting='same_kind'\, where=True)","Copies values from one array to another\, broadcasting as necessary."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.corrcoef.html#numpy.corrcoef","numpy.corrcoef","numpy.corrcoef(x\, y=None\, rowvar=True\, bias=<no value>\, ddof=<no value>)","Return Pearson product-moment correlation coefficients."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef","numpy.ma.corrcoef","numpy.ma.corrcoef(x\, y=None\, rowvar=True\, bias=<no value>\, allow_masked=True\, ddof=<no value>)","Return Pearson product-moment correlation coefficients."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.correlate.html#numpy.correlate","numpy.correlate","numpy.correlate(a\, v\, mode='valid')","Cross-correlation of two 1-dimensional sequences."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cos.html#numpy.cos","numpy.cos","numpy.cos(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'cos'>","Cosine element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cosh.html#numpy.cosh","numpy.cosh","numpy.cosh(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'cosh'>","Hyperbolic cosine\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.count.html#numpy.ma.count","numpy.ma.count","numpy.ma.count(self\, axis=None\, keepdims=<no value>) = <numpy.ma.core._frommethod object>","Count the non-masked elements of the array along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.count.html#numpy.char.count","numpy.char.count","numpy.char.count(a\, sub\, start=0\, end=None)","Returns an array with the number of non-overlapping occurrences of substring sub in the range [start\, end]."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.count_masked.html#numpy.ma.count_masked","numpy.ma.count_masked","numpy.ma.count_masked(arr\, axis=None)","Count the number of masked elements along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.count_nonzero.html#numpy.count_nonzero","numpy.count_nonzero","numpy.count_nonzero(a\, axis=None)","Counts the number of non-zero values in the array a."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cov.html#numpy.cov","numpy.cov","numpy.cov(m\, y=None\, rowvar=True\, bias=False\, ddof=None\, fweights=None\, aweights=None)","Estimate a covariance matrix\, given data and weights."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.cov.html#numpy.ma.cov","numpy.ma.cov","numpy.ma.cov(x\, y=None\, rowvar=True\, bias=False\, allow_masked=True\, ddof=None)","Estimate the covariance matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cross.html#numpy.cross","numpy.cross","numpy.cross(a\, b\, axisa=-1\, axisb=-1\, axisc=-1\, axis=None)","Return the cross product of two (arrays of) vectors."
"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.ctypes_load_library","numpy.ctypeslib.as_array","numpy.ctypeslib.as_array(obj\, shape=None)","Create a numpy array from a ctypes array or POINTER."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.cumprod.html#numpy.ma.cumprod","numpy.ma.cumprod","numpy.ma.cumprod(self\, axis=None\, dtype=None\, out=None) = <numpy.ma.core._frommethod object>","Return the cumulative product of the array elements over the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumprod.html#numpy.cumprod","numpy.cumprod","numpy.cumprod(a\, axis=None\, dtype=None\, out=None)","Return the cumulative product of elements along a given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.cumsum.html#numpy.ma.cumsum","numpy.ma.cumsum","numpy.ma.cumsum(self\, axis=None\, dtype=None\, out=None) = <numpy.ma.core._frommethod object>","Return the cumulative sum of the array elements over the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html#numpy.cumsum","numpy.cumsum","numpy.cumsum(a\, axis=None\, dtype=None\, out=None)","Return the cumulative sum of the elements along a given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.cyan_text.html#numpy.distutils.misc_util.cyan_text","numpy.distutils.misc_util.cyan_text","numpy.distutils.misc_util.cyan_text(s)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.cyg2win32.html#numpy.distutils.misc_util.cyg2win32","numpy.distutils.misc_util.cyg2win32","numpy.distutils.misc_util.cyg2win32(path)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.datetime_as_string.html#numpy.datetime_as_string","numpy.datetime_as_string","numpy.datetime_as_string(arr\, unit=None\, timezone='naive'\, casting='same_kind')","Convert an array of datetimes into an array of strings."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.datetime_data.html#numpy.datetime_data","numpy.datetime_data","numpy.datetime_data(dtype\, /)","Get information about the step size of a date or time type."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.decode.html#numpy.char.decode","numpy.char.decode","numpy.char.decode(a\, encoding=None\, errors=None)","Calls str.decode element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.decorate_methods.html#numpy.testing.decorate_methods","numpy.testing.decorate_methods","numpy.testing.decorate_methods(cls\, decorator\, testmatch=None)","Apply a decorator to all methods in a class matching a regular expression."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value","numpy.ma.default_fill_value","numpy.ma.default_fill_value(obj)","Return the default fill value for the argument object."
"https://docs.scipy.org/doc/numpy/reference/random/generator.html#numpy.random.default_rng","numpy.random.default_rng","numpy.random.default_rng()","Construct a new Generator with the default BitGenerator (PCG64)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.deg2rad.html#numpy.deg2rad","numpy.deg2rad","numpy.deg2rad(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'deg2rad'>","Convert angles from degrees to radians."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.degrees.html#numpy.degrees","numpy.degrees","numpy.degrees(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'degrees'>","Convert angles from radians to degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.delete.html#numpy.delete","numpy.delete","numpy.delete(arr\, obj\, axis=None)","Return a new array with sub-arrays along an axis deleted. For a one dimensional array\, this returns those entries not returned by arr[obj]."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.decorators.deprecated.html#numpy.testing.decorators.deprecated","numpy.testing.decorators.deprecated","numpy.testing.decorators.deprecated(conditional=True)","Filter deprecation warnings while running the test suite."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.det.html#numpy.linalg.det","numpy.linalg.det","numpy.linalg.det(a)","Compute the determinant of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diag.html#numpy.diag","numpy.diag","numpy.diag(v\, k=0)","Extract a diagonal or construct a diagonal array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.diag.html#numpy.ma.diag","numpy.ma.diag","numpy.ma.diag(v\, k=0)","Extract a diagonal or construct a diagonal array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diag_indices.html#numpy.diag_indices","numpy.diag_indices","numpy.diag_indices(n\, ndim=2)","Return the indices to access the main diagonal of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diag_indices_from.html#numpy.diag_indices_from","numpy.diag_indices_from","numpy.diag_indices_from(arr)","Return the indices to access the main diagonal of an n-dimensional array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diagflat.html#numpy.diagflat","numpy.diagflat","numpy.diagflat(v\, k=0)","Create a two-dimensional array with the flattened input as a diagonal."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diagonal.html#numpy.diagonal","numpy.diagonal","numpy.diagonal(a\, offset=0\, axis1=0\, axis2=1)","Return specified diagonals."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.dict_append.html#numpy.distutils.misc_util.dict_append","numpy.distutils.misc_util.dict_append","numpy.distutils.misc_util.dict_append(d\, **kws)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.diff.html#numpy.diff","numpy.diff","numpy.diff(a\, n=1\, axis=-1\, prepend=<no value>\, append=<no value>)","Calculate the n-th discrete difference along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.digitize.html#numpy.digitize","numpy.digitize","numpy.digitize(x\, bins\, right=False)","Return the indices of the bins to which each value in input array belongs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.divide.html#numpy.divide","numpy.divide","numpy.divide(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'true_divide'>","Returns a true division of the inputs\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.divmod.html#numpy.divmod","numpy.divmod","numpy.divmod(x1\, x2\, [out1\, out2\, ]/\, [out=(None\, None)\, ]*\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'divmod'>","Return element-wise quotient and remainder simultaneously."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html#numpy.dot","numpy.dot","numpy.dot(a\, b\, out=None)","Dot product of two arrays. Specifically\,"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.dot.html#numpy.ma.dot","numpy.ma.dot","numpy.ma.dot(a\, b\, strict=False\, out=None)","Return the dot product of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.dot_join.html#numpy.distutils.misc_util.dot_join","numpy.distutils.misc_util.dot_join","numpy.distutils.misc_util.dot_join(*args)",""
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.drop_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dsplit.html#numpy.dsplit","numpy.dsplit","numpy.dsplit(ary\, indices_or_sections)","Split array into multiple sub-arrays along the 3rd axis (depth)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.dstack.html#numpy.ma.dstack","numpy.ma.dstack","numpy.ma.dstack(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","Stack arrays in sequence depth wise (along third axis). This is equivalent to concatenation along the third axis after 2-D arrays of shape (M\,N) have been reshaped to (M\,N\,1) and 1-D arrays of shape (N\,) have been reshaped to (1\,N\,1). Rebuilds arrays divided by dsplit. This function makes most sense for arrays with up to 3 dimensions. For instance\, for pixel-data with a height (first axis)\, width (second axis)\, and r/g/b channels (third axis). The functions concatenate\, stack and block provide more general stacking and concatenation operations. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html#numpy.dstack","numpy.dstack","numpy.dstack(tup)","Stack arrays in sequence depth wise (along third axis)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.dump.html#numpy.ma.dump","numpy.ma.dump","numpy.ma.dump(a\, F)","Pickle a masked array to a file."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.dumps.html#numpy.ma.dumps","numpy.ma.dumps","numpy.ma.dumps(a)","Return a string corresponding to the pickling of a masked array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ediff1d.html#numpy.ediff1d","numpy.ediff1d","numpy.ediff1d(ary\, to_end=None\, to_begin=None)","The differences between consecutive elements of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d","numpy.ma.ediff1d","numpy.ma.ediff1d(arr\, to_end=None\, to_begin=None)","Compute the differences between consecutive elements of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eig.html#numpy.linalg.eig","numpy.linalg.eig","numpy.linalg.eig(a)","Compute the eigenvalues and right eigenvectors of a square array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eigh.html#numpy.linalg.eigh","numpy.linalg.eigh","numpy.linalg.eigh(a\, UPLO='L')","Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eigvals.html#numpy.linalg.eigvals","numpy.linalg.eigvals","numpy.linalg.eigvals(a)","Compute the eigenvalues of a general matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eigvalsh.html#numpy.linalg.eigvalsh","numpy.linalg.eigvalsh","numpy.linalg.eigvalsh(a\, UPLO='L')","Compute the eigenvalues of a complex Hermitian or real symmetric matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html#numpy.einsum","numpy.einsum","numpy.einsum(subscripts\, *operands\, out=None\, dtype=None\, order='K'\, casting='safe'\, optimize=False)","Evaluates the Einstein summation convention on the operands."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum_path.html#numpy.einsum_path","numpy.einsum_path","numpy.einsum_path(subscripts\, *operands\, optimize='greedy')","Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.empty.html#numpy.ma.empty","numpy.ma.empty","numpy.ma.empty(shape\, dtype=float\, order='C') = <numpy.ma.core._convert2ma object>","Return a new array of given shape and type\, without initializing entries."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html#numpy.empty","numpy.empty","numpy.empty(shape\, dtype=float\, order='C')","Return a new array of given shape and type\, without initializing entries."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.empty.html#numpy.matlib.empty","numpy.matlib.empty","numpy.matlib.empty(shape\, dtype=None\, order='C')","Return a new matrix of given shape and type\, without initializing entries."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.empty_like.html#numpy.ma.empty_like","numpy.ma.empty_like","numpy.ma.empty_like(prototype\, dtype=None\, order='K'\, subok=True\, shape=None) = <numpy.ma.core._convert2ma object>","Return a new array with the same shape and type as a given array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty_like.html#numpy.empty_like","numpy.empty_like","numpy.empty_like(prototype\, dtype=None\, order='K'\, subok=True\, shape=None)","Return a new array with the same shape and type as a given array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.encode.html#numpy.char.encode","numpy.char.encode","numpy.char.encode(a\, encoding=None\, errors=None)","Calls str.encode element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.endswith.html#numpy.char.endswith","numpy.char.endswith","numpy.char.endswith(a\, suffix\, start=0\, end=None)","Returns a boolean array which is True where the string element in a ends with suffix\, otherwise False."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.equal.html#numpy.equal","numpy.equal","numpy.equal(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'equal'>","Return (x1 == x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.equal.html#numpy.char.equal","numpy.char.equal","numpy.char.equal(x1\, x2)","Return (x1 == x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp.html#numpy.exp","numpy.exp","numpy.exp(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'exp'>","Calculate the exponential of all elements in the input array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp2.html#numpy.exp2","numpy.exp2","numpy.exp2(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'exp2'>","Calculate 2**p for all p in the input array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.expand_dims.html#numpy.expand_dims","numpy.expand_dims","numpy.expand_dims(a\, axis)","Expand the shape of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims","numpy.ma.expand_dims","numpy.ma.expand_dims(a\, axis)","Expand the shape of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.expandtabs.html#numpy.char.expandtabs","numpy.char.expandtabs","numpy.char.expandtabs(a\, tabsize=8)","Return a copy of each string element where all tab characters are replaced by one or more spaces."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.expm1.html#numpy.expm1","numpy.expm1","numpy.expm1(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'expm1'>","Calculate exp(x) - 1 for all elements in the array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.extract.html#numpy.extract","numpy.extract","numpy.extract(condition\, arr)","Return the elements of an array that satisfy some condition."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.eye.html#numpy.eye","numpy.eye","numpy.eye(N\, M=None\, k=0\, dtype=<class 'float'>\, order='C')","Return a 2-D array with ones on the diagonal and zeros elsewhere."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.eye.html#numpy.matlib.eye","numpy.matlib.eye","numpy.matlib.eye(n\, M=None\, k=0\, dtype=<class 'float'>\, order='C')","Return a matrix with ones on the diagonal and zeros elsewhere."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fabs.html#numpy.fabs","numpy.fabs","numpy.fabs(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'fabs'>","Compute the absolute values element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fft.html#numpy.fft.fft","numpy.fft.fft","numpy.fft.fft(a\, n=None\, axis=-1\, norm=None)","Compute the one-dimensional discrete Fourier Transform."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fft2.html#numpy.fft.fft2","numpy.fft.fft2","numpy.fft.fft2(a\, s=None\, axes=(-2\, -1)\, norm=None)","Compute the 2-dimensional discrete Fourier Transform"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fftfreq.html#numpy.fft.fftfreq","numpy.fft.fftfreq","numpy.fft.fftfreq(n\, d=1.0)","Return the Discrete Fourier Transform sample frequencies."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fftn.html#numpy.fft.fftn","numpy.fft.fftn","numpy.fft.fftn(a\, s=None\, axes=None\, norm=None)","Compute the N-dimensional discrete Fourier Transform."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fftshift.html#numpy.fft.fftshift","numpy.fft.fftshift","numpy.fft.fftshift(x\, axes=None)","Shift the zero-frequency component to the center of the spectrum."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fill_diagonal.html#numpy.fill_diagonal","numpy.fill_diagonal","numpy.fill_diagonal(a\, val\, wrap=False)","Fill the main diagonal of the given array of any dimensionality."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.filled.html#numpy.ma.filled","numpy.ma.filled","numpy.ma.filled(a\, fill_value=None)","Return input as an array with masked data replaced by a fill value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.filter_sources.html#numpy.distutils.misc_util.filter_sources","numpy.distutils.misc_util.filter_sources","numpy.distutils.misc_util.filter_sources(sources)","Return four lists of filenames containing C\, C++\, Fortran\, and Fortran 90 module sources\, respectively."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.find.html#numpy.char.find","numpy.char.find","numpy.char.find(a\, sub\, start=0\, end=None)","For each element\, return the lowest index in the string where substring sub is found."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.find_common_type.html#numpy.find_common_type","numpy.find_common_type","numpy.find_common_type(array_types\, scalar_types)","Determine common type following standard coercion rules."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.find_duplicates","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fix.html#numpy.fix","numpy.fix","numpy.fix(x\, out=None)","Round to nearest integer towards zero."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid","numpy.ma.fix_invalid","numpy.ma.fix_invalid(a\, mask=False\, copy=True\, fill_value=None)","Return input with invalid data masked and replaced by a fill value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.flatnonzero.html#numpy.flatnonzero","numpy.flatnonzero","numpy.flatnonzero(a)","Return indices that are non-zero in the flattened version of a."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous","numpy.ma.flatnotmasked_contiguous","numpy.ma.flatnotmasked_contiguous(a)","Find contiguous unmasked data in a masked array along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges","numpy.ma.flatnotmasked_edges","numpy.ma.flatnotmasked_edges(a)","Find the indices of the first and last unmasked values."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.flatten_descr","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.flip.html#numpy.flip","numpy.flip","numpy.flip(m\, axis=None)","Reverse the order of elements in an array along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fliplr.html#numpy.fliplr","numpy.fliplr","numpy.fliplr(m)","Flip array in the left/right direction."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.flipud.html#numpy.flipud","numpy.flipud","numpy.flipud(m)","Flip array in the up/down direction."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.float_power.html#numpy.float_power","numpy.float_power","numpy.float_power(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'float_power'>","First array elements raised to powers from second array\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.floor.html#numpy.floor","numpy.floor","numpy.floor(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'floor'>","Return the floor of the input\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.floor_divide.html#numpy.floor_divide","numpy.floor_divide","numpy.floor_divide(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'floor_divide'>","Return the largest integer smaller or equal to the division of the inputs. It is equivalent to the Python // operator and pairs with the Python % (remainder)\, function so that a = a % b + b * (a // b) up to roundoff."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fmax.html#numpy.fmax","numpy.fmax","numpy.fmax(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'fmax'>","Element-wise maximum of array elements."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fmin.html#numpy.fmin","numpy.fmin","numpy.fmin(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'fmin'>","Element-wise minimum of array elements."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fmod.html#numpy.fmod","numpy.fmod","numpy.fmod(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'fmod'>","Return the element-wise remainder of division."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.format_float_positional.html#numpy.format_float_positional","numpy.format_float_positional","numpy.format_float_positional(x\, precision=None\, unique=True\, fractional=True\, trim='k'\, sign=False\, pad_left=None\, pad_right=None)","Format a floating-point scalar as a decimal string in positional notation."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific","numpy.format_float_scientific","numpy.format_float_scientific(x\, precision=None\, unique=True\, trim='k'\, sign=False\, pad_left=None\, exp_digits=None)","Format a floating-point scalar as a decimal string in scientific notation."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.frexp.html#numpy.frexp","numpy.frexp","numpy.frexp(x\, [out1\, out2\, ]/\, [out=(None\, None)\, ]*\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'frexp'>","Decompose the elements of x into mantissa and twos exponent."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.fromarrays.html#numpy.core.records.fromarrays","numpy.core.records.fromarrays","numpy.core.records.fromarrays(arrayList\, dtype=None\, shape=None\, formats=None\, names=None\, titles=None\, aligned=False\, byteorder=None)","create a record array from a (flat) list of arrays"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer","numpy.ma.frombuffer","numpy.ma.frombuffer(buffer\, dtype=float\, count=-1\, offset=0) = <numpy.ma.core._convert2ma object>","Interpret a buffer as a 1-dimensional array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.frombuffer.html#numpy.frombuffer","numpy.frombuffer","numpy.frombuffer(buffer\, dtype=float\, count=-1\, offset=0)","Interpret a buffer as a 1-dimensional array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html#numpy.fromfile","numpy.fromfile","numpy.fromfile(file\, dtype=float\, count=-1\, sep=''\, offset=0)","Construct an array from data in a text or binary file."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile","numpy.core.records.fromfile","numpy.core.records.fromfile(fd\, dtype=None\, shape=None\, offset=0\, formats=None\, names=None\, titles=None\, aligned=False\, byteorder=None)","Create an array from binary file data"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction","numpy.ma.fromfunction","numpy.ma.fromfunction(function\, shape\, **kwargs) = <numpy.ma.core._convert2ma object>","Construct an array by executing a function over each coordinate."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfunction.html#numpy.fromfunction","numpy.fromfunction","numpy.fromfunction(function\, shape\, **kwargs)","Construct an array by executing a function over each coordinate."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromiter.html#numpy.fromiter","numpy.fromiter","numpy.fromiter(iterable\, dtype\, count=-1)","Create a new 1-dimensional array from an iterable object."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.frompyfunc.html#numpy.frompyfunc","numpy.frompyfunc","numpy.frompyfunc(func\, nin\, nout)","Takes an arbitrary Python function and returns a NumPy ufunc."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.fromrecords.html#numpy.core.records.fromrecords","numpy.core.records.fromrecords","numpy.core.records.fromrecords(recList\, dtype=None\, shape=None\, formats=None\, names=None\, titles=None\, aligned=False\, byteorder=None)","create a recarray from a list of records in text form"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromregex.html#numpy.fromregex","numpy.fromregex","numpy.fromregex(file\, regexp\, dtype\, encoding=None)","Construct an array from a text file\, using regular expression parsing."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromstring.html#numpy.fromstring","numpy.fromstring","numpy.fromstring(string\, dtype=float\, count=-1\, sep='')","A new 1-D array initialized from text data in a string."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.core.records.fromstring.html#numpy.core.records.fromstring","numpy.core.records.fromstring","numpy.core.records.fromstring(datastring\, dtype=None\, shape=None\, offset=0\, formats=None\, names=None\, titles=None\, aligned=False\, byteorder=None)","create a (read-only) record array from binary data contained in a string"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html#numpy.full","numpy.full","numpy.full(shape\, fill_value\, dtype=None\, order='C')","Return a new array of given shape and type\, filled with fill_value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.full_like.html#numpy.full_like","numpy.full_like","numpy.full_like(a\, fill_value\, dtype=None\, order='K'\, subok=True\, shape=None)","Return a full array with the same shape and type as a given array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fv.html#numpy.fv","numpy.fv","numpy.fv(rate\, nper\, pmt\, pv\, when='end')","Compute the future value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.gcd.html#numpy.gcd","numpy.gcd","numpy.gcd(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'gcd'>","Returns the greatest common divisor of |x1| and |x2|"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.generate_config_py.html#numpy.distutils.misc_util.generate_config_py","numpy.distutils.misc_util.generate_config_py","numpy.distutils.misc_util.generate_config_py(target)","Generate config.py file containing system_info information used during building the package."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html#numpy.genfromtxt","numpy.genfromtxt","numpy.genfromtxt(fname\, dtype=<class 'float'>\, comments='#'\, delimiter=None\, skip_header=0\, skip_footer=0\, converters=None\, missing_values=None\, filling_values=None\, usecols=None\, names=None\, excludelist=None\, deletechars=""" !#$%&'()*+\, -./:;<=>?@[\]^{|}~"""\, replace_space='_'\, autostrip=False\, case_sensitive=True\, defaultfmt='f%i'\, unpack=None\, usemask=False\, loose=True\, invalid_raise=True\, max_rows=None\, encoding='bytes')","Load data from a text file\, with missing values handled as specified."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.geomspace.html#numpy.geomspace","numpy.geomspace","numpy.geomspace(start\, stop\, num=50\, endpoint=True\, dtype=None\, axis=0)","Return numbers spaced evenly on a log scale (a geometric progression)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.get_cmd.html#numpy.distutils.misc_util.get_cmd","numpy.distutils.misc_util.get_cmd","numpy.distutils.misc_util.get_cmd(cmdname\, _cache={})",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.get_dependencies.html#numpy.distutils.misc_util.get_dependencies","numpy.distutils.misc_util.get_dependencies","numpy.distutils.misc_util.get_dependencies(sources)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.get_ext_source_files.html#numpy.distutils.misc_util.get_ext_source_files","numpy.distutils.misc_util.get_ext_source_files","numpy.distutils.misc_util.get_ext_source_files(ext)",""
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.get_fieldstructure","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.system_info.get_info.html#numpy.distutils.system_info.get_info","numpy.distutils.system_info.get_info","numpy.distutils.system_info.get_info(name\, notfound_action=0)","notfound_action: 0 - do nothing 1 - display warning message 2 - raise error "
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.get_names","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.get_names_flat","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.get_numpy_include_dirs.html#numpy.distutils.misc_util.get_numpy_include_dirs","numpy.distutils.misc_util.get_numpy_include_dirs","numpy.distutils.misc_util.get_numpy_include_dirs()",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.get_printoptions.html#numpy.get_printoptions","numpy.get_printoptions","numpy.get_printoptions()","Return the current print options."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.get_script_files.html#numpy.distutils.misc_util.get_script_files","numpy.distutils.misc_util.get_script_files","numpy.distutils.misc_util.get_script_files(scripts)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.system_info.get_standard_file.html#numpy.distutils.system_info.get_standard_file","numpy.distutils.system_info.get_standard_file","numpy.distutils.system_info.get_standard_file(fname)","Returns a list of files named ‘fname’ from 1) System-wide directory (directory-location of this module) 2) Users HOME directory (os.environ[‘HOME’]) 3) Local directory"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.getbufsize.html#numpy.getbufsize","numpy.getbufsize","numpy.getbufsize()","Return the size of the buffer used in ufuncs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.getdata.html#numpy.ma.getdata","numpy.ma.getdata","numpy.ma.getdata(a\, subok=True)","Return the data of a masked array as an ndarray."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.getdomain.html#numpy.polynomial.polyutils.getdomain","numpy.polynomial.polyutils.getdomain","numpy.polynomial.polyutils.getdomain(x)","Return a domain suitable for given abscissae."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.geterr.html#numpy.geterr","numpy.geterr","numpy.geterr()","Get the current way of handling floating-point errors."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.geterrcall.html#numpy.geterrcall","numpy.geterrcall","numpy.geterrcall()","Return the current callback function used on floating-point errors."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.geterrobj.html#numpy.geterrobj","numpy.geterrobj","numpy.geterrobj()","Return the current object that defines floating-point error handling."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.getmask.html#numpy.ma.getmask","numpy.ma.getmask","numpy.ma.getmask(a)","Return the mask of a masked array\, or nomask."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray","numpy.ma.getmaskarray","numpy.ma.getmaskarray(arr)","Return the mask of a masked array\, or full boolean array of False."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.gradient.html#numpy.gradient","numpy.gradient","numpy.gradient(f\, *varargs\, **kwargs)","Return the gradient of an N-dimensional array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.greater.html#numpy.greater","numpy.greater","numpy.greater(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'greater'>","Return the truth value of (x1 > x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.greater.html#numpy.char.greater","numpy.char.greater","numpy.char.greater(x1\, x2)","Return (x1 > x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.greater_equal.html#numpy.greater_equal","numpy.greater_equal","numpy.greater_equal(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'greater_equal'>","Return the truth value of (x1 >= x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.greater_equal.html#numpy.char.greater_equal","numpy.char.greater_equal","numpy.char.greater_equal(x1\, x2)","Return (x1 >= x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.green_text.html#numpy.distutils.misc_util.green_text","numpy.distutils.misc_util.green_text","numpy.distutils.misc_util.green_text(s)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hamming.html#numpy.hamming","numpy.hamming","numpy.hamming(M)","Return the Hamming window."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hanning.html#numpy.hanning","numpy.hanning","numpy.hanning(M)","Return the Hanning window."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask","numpy.ma.harden_mask","numpy.ma.harden_mask(self) = <numpy.ma.core._frommethod object>","Force the mask to hard."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.has_cxx_sources.html#numpy.distutils.misc_util.has_cxx_sources","numpy.distutils.misc_util.has_cxx_sources","numpy.distutils.misc_util.has_cxx_sources(sources)","Return True if sources contains C++ files"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.has_f_sources.html#numpy.distutils.misc_util.has_f_sources","numpy.distutils.misc_util.has_f_sources","numpy.distutils.misc_util.has_f_sources(sources)","Return True if sources contains Fortran files"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.heaviside.html#numpy.heaviside","numpy.heaviside","numpy.heaviside(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'heaviside'>","Compute the Heaviside step function."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.herm2poly.html#numpy.polynomial.hermite.herm2poly","numpy.polynomial.hermite.herm2poly","numpy.polynomial.hermite.herm2poly(c)","Convert a Hermite series to a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermadd.html#numpy.polynomial.hermite.hermadd","numpy.polynomial.hermite.hermadd","numpy.polynomial.hermite.hermadd(c1\, c2)","Add one Hermite series to another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermcompanion.html#numpy.polynomial.hermite.hermcompanion","numpy.polynomial.hermite.hermcompanion","numpy.polynomial.hermite.hermcompanion(c)","Return the scaled companion matrix of c."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermder.html#numpy.polynomial.hermite.hermder","numpy.polynomial.hermite.hermder","numpy.polynomial.hermite.hermder(c\, m=1\, scl=1\, axis=0)","Differentiate a Hermite series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermdiv.html#numpy.polynomial.hermite.hermdiv","numpy.polynomial.hermite.hermdiv","numpy.polynomial.hermite.hermdiv(c1\, c2)","Divide one Hermite series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermdomain.html#numpy.polynomial.hermite.hermdomain","numpy.polynomial.hermite.hermdomain = array","numpy.polynomial.hermite.hermdomain = array([-1\,  1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.herme2poly.html#numpy.polynomial.hermite_e.herme2poly","numpy.polynomial.hermite_e.herme2poly","numpy.polynomial.hermite_e.herme2poly(c)","Convert a Hermite series to a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeadd.html#numpy.polynomial.hermite_e.hermeadd","numpy.polynomial.hermite_e.hermeadd","numpy.polynomial.hermite_e.hermeadd(c1\, c2)","Add one Hermite series to another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermecompanion.html#numpy.polynomial.hermite_e.hermecompanion","numpy.polynomial.hermite_e.hermecompanion","numpy.polynomial.hermite_e.hermecompanion(c)","Return the scaled companion matrix of c."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeder.html#numpy.polynomial.hermite_e.hermeder","numpy.polynomial.hermite_e.hermeder","numpy.polynomial.hermite_e.hermeder(c\, m=1\, scl=1\, axis=0)","Differentiate a Hermite_e series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermediv.html#numpy.polynomial.hermite_e.hermediv","numpy.polynomial.hermite_e.hermediv","numpy.polynomial.hermite_e.hermediv(c1\, c2)","Divide one Hermite series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermedomain.html#numpy.polynomial.hermite_e.hermedomain","numpy.polynomial.hermite_e.hermedomain = array","numpy.polynomial.hermite_e.hermedomain = array([-1\,  1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermefit.html#numpy.polynomial.hermite_e.hermefit","numpy.polynomial.hermite_e.hermefit","numpy.polynomial.hermite_e.hermefit(x\, y\, deg\, rcond=None\, full=False\, w=None)","Least squares fit of Hermite series to data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermefromroots.html#numpy.polynomial.hermite_e.hermefromroots","numpy.polynomial.hermite_e.hermefromroots","numpy.polynomial.hermite_e.hermefromroots(roots)","Generate a HermiteE series with given roots."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermegauss.html#numpy.polynomial.hermite_e.hermegauss","numpy.polynomial.hermite_e.hermegauss","numpy.polynomial.hermite_e.hermegauss(deg)","Gauss-HermiteE quadrature."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermegrid2d.html#numpy.polynomial.hermite_e.hermegrid2d","numpy.polynomial.hermite_e.hermegrid2d","numpy.polynomial.hermite_e.hermegrid2d(x\, y\, c)","Evaluate a 2-D HermiteE series on the Cartesian product of x and y."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermegrid3d.html#numpy.polynomial.hermite_e.hermegrid3d","numpy.polynomial.hermite_e.hermegrid3d","numpy.polynomial.hermite_e.hermegrid3d(x\, y\, z\, c)","Evaluate a 3-D HermiteE series on the Cartesian product of x\, y\, and z."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeint.html#numpy.polynomial.hermite_e.hermeint","numpy.polynomial.hermite_e.hermeint","numpy.polynomial.hermite_e.hermeint(c\, m=1\, k=[]\, lbnd=0\, scl=1\, axis=0)","Integrate a Hermite_e series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeline.html#numpy.polynomial.hermite_e.hermeline","numpy.polynomial.hermite_e.hermeline","numpy.polynomial.hermite_e.hermeline(off\, scl)","Hermite series whose graph is a straight line."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermemul.html#numpy.polynomial.hermite_e.hermemul","numpy.polynomial.hermite_e.hermemul","numpy.polynomial.hermite_e.hermemul(c1\, c2)","Multiply one Hermite series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermemulx.html#numpy.polynomial.hermite_e.hermemulx","numpy.polynomial.hermite_e.hermemulx","numpy.polynomial.hermite_e.hermemulx(c)","Multiply a Hermite series by x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeone.html#numpy.polynomial.hermite_e.hermeone","numpy.polynomial.hermite_e.hermeone = array","numpy.polynomial.hermite_e.hermeone = array([1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermepow.html#numpy.polynomial.hermite_e.hermepow","numpy.polynomial.hermite_e.hermepow","numpy.polynomial.hermite_e.hermepow(c\, pow\, maxpower=16)","Raise a Hermite series to a power."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeroots.html#numpy.polynomial.hermite_e.hermeroots","numpy.polynomial.hermite_e.hermeroots","numpy.polynomial.hermite_e.hermeroots(c)","Compute the roots of a HermiteE series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermesub.html#numpy.polynomial.hermite_e.hermesub","numpy.polynomial.hermite_e.hermesub","numpy.polynomial.hermite_e.hermesub(c1\, c2)","Subtract one Hermite series from another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermetrim.html#numpy.polynomial.hermite_e.hermetrim","numpy.polynomial.hermite_e.hermetrim","numpy.polynomial.hermite_e.hermetrim(c\, tol=0)","Remove “small” “trailing” coefficients from a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeval.html#numpy.polynomial.hermite_e.hermeval","numpy.polynomial.hermite_e.hermeval","numpy.polynomial.hermite_e.hermeval(x\, c\, tensor=True)","Evaluate an HermiteE series at points x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeval2d.html#numpy.polynomial.hermite_e.hermeval2d","numpy.polynomial.hermite_e.hermeval2d","numpy.polynomial.hermite_e.hermeval2d(x\, y\, c)","Evaluate a 2-D HermiteE series at points (x\, y)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeval3d.html#numpy.polynomial.hermite_e.hermeval3d","numpy.polynomial.hermite_e.hermeval3d","numpy.polynomial.hermite_e.hermeval3d(x\, y\, z\, c)","Evaluate a 3-D Hermite_e series at points (x\, y\, z)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermevander.html#numpy.polynomial.hermite_e.hermevander","numpy.polynomial.hermite_e.hermevander","numpy.polynomial.hermite_e.hermevander(x\, deg)","Pseudo-Vandermonde matrix of given degree."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermevander2d.html#numpy.polynomial.hermite_e.hermevander2d","numpy.polynomial.hermite_e.hermevander2d","numpy.polynomial.hermite_e.hermevander2d(x\, y\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermevander3d.html#numpy.polynomial.hermite_e.hermevander3d","numpy.polynomial.hermite_e.hermevander3d","numpy.polynomial.hermite_e.hermevander3d(x\, y\, z\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermeweight.html#numpy.polynomial.hermite_e.hermeweight","numpy.polynomial.hermite_e.hermeweight","numpy.polynomial.hermite_e.hermeweight(x)","Weight function of the Hermite_e polynomials."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermex.html#numpy.polynomial.hermite_e.hermex","numpy.polynomial.hermite_e.hermex = array","numpy.polynomial.hermite_e.hermex = array([0\, 1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.hermezero.html#numpy.polynomial.hermite_e.hermezero","numpy.polynomial.hermite_e.hermezero = array","numpy.polynomial.hermite_e.hermezero = array([0])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermfit.html#numpy.polynomial.hermite.hermfit","numpy.polynomial.hermite.hermfit","numpy.polynomial.hermite.hermfit(x\, y\, deg\, rcond=None\, full=False\, w=None)","Least squares fit of Hermite series to data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermfromroots.html#numpy.polynomial.hermite.hermfromroots","numpy.polynomial.hermite.hermfromroots","numpy.polynomial.hermite.hermfromroots(roots)","Generate a Hermite series with given roots."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermgauss.html#numpy.polynomial.hermite.hermgauss","numpy.polynomial.hermite.hermgauss","numpy.polynomial.hermite.hermgauss(deg)","Gauss-Hermite quadrature."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermgrid2d.html#numpy.polynomial.hermite.hermgrid2d","numpy.polynomial.hermite.hermgrid2d","numpy.polynomial.hermite.hermgrid2d(x\, y\, c)","Evaluate a 2-D Hermite series on the Cartesian product of x and y."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermgrid3d.html#numpy.polynomial.hermite.hermgrid3d","numpy.polynomial.hermite.hermgrid3d","numpy.polynomial.hermite.hermgrid3d(x\, y\, z\, c)","Evaluate a 3-D Hermite series on the Cartesian product of x\, y\, and z."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermint.html#numpy.polynomial.hermite.hermint","numpy.polynomial.hermite.hermint","numpy.polynomial.hermite.hermint(c\, m=1\, k=[]\, lbnd=0\, scl=1\, axis=0)","Integrate a Hermite series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermline.html#numpy.polynomial.hermite.hermline","numpy.polynomial.hermite.hermline","numpy.polynomial.hermite.hermline(off\, scl)","Hermite series whose graph is a straight line."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermmul.html#numpy.polynomial.hermite.hermmul","numpy.polynomial.hermite.hermmul","numpy.polynomial.hermite.hermmul(c1\, c2)","Multiply one Hermite series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermmulx.html#numpy.polynomial.hermite.hermmulx","numpy.polynomial.hermite.hermmulx","numpy.polynomial.hermite.hermmulx(c)","Multiply a Hermite series by x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermone.html#numpy.polynomial.hermite.hermone","numpy.polynomial.hermite.hermone = array","numpy.polynomial.hermite.hermone = array([1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermpow.html#numpy.polynomial.hermite.hermpow","numpy.polynomial.hermite.hermpow","numpy.polynomial.hermite.hermpow(c\, pow\, maxpower=16)","Raise a Hermite series to a power."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermroots.html#numpy.polynomial.hermite.hermroots","numpy.polynomial.hermite.hermroots","numpy.polynomial.hermite.hermroots(c)","Compute the roots of a Hermite series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermsub.html#numpy.polynomial.hermite.hermsub","numpy.polynomial.hermite.hermsub","numpy.polynomial.hermite.hermsub(c1\, c2)","Subtract one Hermite series from another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermtrim.html#numpy.polynomial.hermite.hermtrim","numpy.polynomial.hermite.hermtrim","numpy.polynomial.hermite.hermtrim(c\, tol=0)","Remove “small” “trailing” coefficients from a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermval.html#numpy.polynomial.hermite.hermval","numpy.polynomial.hermite.hermval","numpy.polynomial.hermite.hermval(x\, c\, tensor=True)","Evaluate an Hermite series at points x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermval2d.html#numpy.polynomial.hermite.hermval2d","numpy.polynomial.hermite.hermval2d","numpy.polynomial.hermite.hermval2d(x\, y\, c)","Evaluate a 2-D Hermite series at points (x\, y)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermval3d.html#numpy.polynomial.hermite.hermval3d","numpy.polynomial.hermite.hermval3d","numpy.polynomial.hermite.hermval3d(x\, y\, z\, c)","Evaluate a 3-D Hermite series at points (x\, y\, z)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermvander.html#numpy.polynomial.hermite.hermvander","numpy.polynomial.hermite.hermvander","numpy.polynomial.hermite.hermvander(x\, deg)","Pseudo-Vandermonde matrix of given degree."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermvander2d.html#numpy.polynomial.hermite.hermvander2d","numpy.polynomial.hermite.hermvander2d","numpy.polynomial.hermite.hermvander2d(x\, y\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermvander3d.html#numpy.polynomial.hermite.hermvander3d","numpy.polynomial.hermite.hermvander3d","numpy.polynomial.hermite.hermvander3d(x\, y\, z\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermweight.html#numpy.polynomial.hermite.hermweight","numpy.polynomial.hermite.hermweight","numpy.polynomial.hermite.hermweight(x)","Weight function of the Hermite polynomials."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermx.html#numpy.polynomial.hermite.hermx","numpy.polynomial.hermite.hermx = array","numpy.polynomial.hermite.hermx = array([0. \, 0.5])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.hermzero.html#numpy.polynomial.hermite.hermzero","numpy.polynomial.hermite.hermzero = array","numpy.polynomial.hermite.hermzero = array([0])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.hfft.html#numpy.fft.hfft","numpy.fft.hfft","numpy.fft.hfft(a\, n=None\, axis=-1\, norm=None)","Compute the FFT of a signal that has Hermitian symmetry\, i.e.\, a real spectrum."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram.html#numpy.histogram","numpy.histogram","numpy.histogram(a\, bins=10\, range=None\, normed=None\, weights=None\, density=None)","Compute the histogram of a set of data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram2d.html#numpy.histogram2d","numpy.histogram2d","numpy.histogram2d(x\, y\, bins=10\, range=None\, normed=None\, weights=None\, density=None)","Compute the bi-dimensional histogram of two data samples."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges","numpy.histogram_bin_edges","numpy.histogram_bin_edges(a\, bins=10\, range=None\, weights=None)","Function to calculate only the edges of the bins used by the histogram function."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogramdd.html#numpy.histogramdd","numpy.histogramdd","numpy.histogramdd(sample\, bins=10\, range=None\, normed=None\, weights=None\, density=None)","Compute the multidimensional histogram of some data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.hsplit.html#numpy.ma.hsplit","numpy.ma.hsplit","numpy.ma.hsplit(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_single object>","Split an array into multiple sub-arrays horizontally (column-wise). Please refer to the split documentation.  hsplit is equivalent to split with axis=1\, the array is always split along the second axis regardless of the array dimension. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hsplit.html#numpy.hsplit","numpy.hsplit","numpy.hsplit(ary\, indices_or_sections)","Split an array into multiple sub-arrays horizontally (column-wise)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.hstack.html#numpy.ma.hstack","numpy.ma.hstack","numpy.ma.hstack(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","Stack arrays in sequence horizontally (column wise). This is equivalent to concatenation along the second axis\, except for 1-D arrays where it concatenates along the first axis. Rebuilds arrays divided by hsplit. This function makes most sense for arrays with up to 3 dimensions. For instance\, for pixel-data with a height (first axis)\, width (second axis)\, and r/g/b channels (third axis). The functions concatenate\, stack and block provide more general stacking and concatenation operations. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html#numpy.hstack","numpy.hstack","numpy.hstack(tup)","Stack arrays in sequence horizontally (column wise)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.hypot.html#numpy.hypot","numpy.hypot","numpy.hypot(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'hypot'>","Given the “legs” of a right triangle\, return its hypotenuse."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.i0.html#numpy.i0","numpy.i0","numpy.i0(x)","Modified Bessel function of the first kind\, order 0."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.identity.html#numpy.ma.identity","numpy.ma.identity","numpy.ma.identity(n\, dtype=None) = <numpy.ma.core._convert2ma object>","Return the identity array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.identity.html#numpy.identity","numpy.identity","numpy.identity(n\, dtype=None)","Return the identity array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.identity.html#numpy.matlib.identity","numpy.matlib.identity","numpy.matlib.identity(n\, dtype=None)","Returns the square identity matrix of given size."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifft.html#numpy.fft.ifft","numpy.fft.ifft","numpy.fft.ifft(a\, n=None\, axis=-1\, norm=None)","Compute the one-dimensional inverse discrete Fourier Transform."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifft2.html#numpy.fft.ifft2","numpy.fft.ifft2","numpy.fft.ifft2(a\, s=None\, axes=(-2\, -1)\, norm=None)","Compute the 2-dimensional inverse discrete Fourier Transform."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifftn.html#numpy.fft.ifftn","numpy.fft.ifftn","numpy.fft.ifftn(a\, s=None\, axes=None\, norm=None)","Compute the N-dimensional inverse discrete Fourier Transform."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifftshift.html#numpy.fft.ifftshift","numpy.fft.ifftshift","numpy.fft.ifftshift(x\, axes=None)","The inverse of fftshift. Although identical for even-length x\, the functions differ by one sample for odd-length x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ihfft.html#numpy.fft.ihfft","numpy.fft.ihfft","numpy.fft.ihfft(a\, n=None\, axis=-1\, norm=None)","Compute the inverse FFT of a signal that has Hermitian symmetry."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.imag.html#numpy.imag","numpy.imag","numpy.imag(val)","Return the imaginary part of the complex argument."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html#numpy.in1d","numpy.in1d","numpy.in1d(ar1\, ar2\, assume_unique=False\, invert=False)","Test whether each element of a 1-D array is also present in a second array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.index.html#numpy.char.index","numpy.char.index","numpy.char.index(a\, sub\, start=0\, end=None)","Like find\, but raises ValueError when the substring is not found."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.indices.html#numpy.indices","numpy.indices","numpy.indices(dimensions\, dtype=<class 'int'>\, sparse=False)","Return an array representing the indices of a grid."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.indices.html#numpy.ma.indices","numpy.ma.indices","numpy.ma.indices(dimensions\, dtype=<class 'int'>\, sparse=False)","Return an array representing the indices of a grid."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.info.html#numpy.info","numpy.info","numpy.info(object=None\, maxwidth=76\, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>\, toplevel='numpy')","Get help information for a function\, class\, or module."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.inner.html#numpy.inner","numpy.inner","numpy.inner(a\, b)","Inner product of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.inner.html#numpy.ma.inner","numpy.ma.inner","numpy.ma.inner(a\, b)","Inner product of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct","numpy.ma.innerproduct","numpy.ma.innerproduct(a\, b)","Inner product of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.insert.html#numpy.insert","numpy.insert","numpy.insert(arr\, obj\, values\, axis=None)","Insert values along the given axis before the given indices."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.interp.html#numpy.interp","numpy.interp","numpy.interp(x\, xp\, fp\, left=None\, right=None\, period=None)","One-dimensional linear interpolation."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.intersect1d.html#numpy.intersect1d","numpy.intersect1d","numpy.intersect1d(ar1\, ar2\, assume_unique=False\, return_indices=False)","Find the intersection of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.inv.html#numpy.linalg.inv","numpy.linalg.inv","numpy.linalg.inv(a)","Compute the (multiplicative) inverse of a matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.invert.html#numpy.invert","numpy.invert","numpy.invert(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'invert'>","Compute bit-wise inversion\, or bit-wise NOT\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ipmt.html#numpy.ipmt","numpy.ipmt","numpy.ipmt(rate\, per\, nper\, pv\, fv=0\, when='end')","Compute the interest portion of a payment."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.irfft.html#numpy.fft.irfft","numpy.fft.irfft","numpy.fft.irfft(a\, n=None\, axis=-1\, norm=None)","Compute the inverse of the n-point DFT for real input."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.irfft2.html#numpy.fft.irfft2","numpy.fft.irfft2","numpy.fft.irfft2(a\, s=None\, axes=(-2\, -1)\, norm=None)","Compute the 2-dimensional inverse FFT of a real array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.irfftn.html#numpy.fft.irfftn","numpy.fft.irfftn","numpy.fft.irfftn(a\, s=None\, axes=None\, norm=None)","Compute the inverse of the N-dimensional FFT of real input."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.irr.html#numpy.irr","numpy.irr","numpy.irr(values)","Return the Internal Rate of Return (IRR)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.is_busday.html#numpy.is_busday","numpy.is_busday","numpy.is_busday(dates\, weekmask='1111100'\, holidays=None\, busdaycal=None\, out=None)","Calculates which of the given dates are valid days\, and which are not."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.is_local_src_dir.html#numpy.distutils.misc_util.is_local_src_dir","numpy.distutils.misc_util.is_local_src_dir","numpy.distutils.misc_util.is_local_src_dir(directory)","Return true if directory is local directory."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.is_mask.html#numpy.ma.is_mask","numpy.ma.is_mask","numpy.ma.is_mask(m)","Return True if m is a valid\, standard mask."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.is_masked.html#numpy.ma.is_masked","numpy.ma.is_masked","numpy.ma.is_masked(x)","Determine whether input has masked values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isalnum.html#numpy.char.isalnum","numpy.char.isalnum","numpy.char.isalnum(a)","Returns true for each element if all characters in the string are alphanumeric and there is at least one character\, false otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isalpha.html#numpy.char.isalpha","numpy.char.isalpha","numpy.char.isalpha(a)","Returns true for each element if all characters in the string are alphabetic and there is at least one character\, false otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isclose.html#numpy.isclose","numpy.isclose","numpy.isclose(a\, b\, rtol=1e-05\, atol=1e-08\, equal_nan=False)","Returns a boolean array where two arrays are element-wise equal within a tolerance."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.iscomplex.html#numpy.iscomplex","numpy.iscomplex","numpy.iscomplex(x)","Returns a bool array\, where True if input element is complex."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.iscomplexobj.html#numpy.iscomplexobj","numpy.iscomplexobj","numpy.iscomplexobj(x)","Check for a complex type or an array of complex numbers."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isdecimal.html#numpy.char.isdecimal","numpy.char.isdecimal","numpy.char.isdecimal(a)","For each element\, return True if there are only decimal characters in the element."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isdigit.html#numpy.char.isdigit","numpy.char.isdigit","numpy.char.isdigit(a)","Returns true for each element if all characters in the string are digits and there is at least one character\, false otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isfinite.html#numpy.isfinite","numpy.isfinite","numpy.isfinite(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'isfinite'>","Test element-wise for finiteness (not infinity or not Not a Number)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isfortran.html#numpy.isfortran","numpy.isfortran","numpy.isfortran(a)","Check if the array is Fortran contiguous but not C contiguous."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isin.html#numpy.isin","numpy.isin","numpy.isin(element\, test_elements\, assume_unique=False\, invert=False)","Calculates element in test_elements\, broadcasting over element only. Returns a boolean array of the same shape as element that is True where an element of element is in test_elements and False otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isinf.html#numpy.isinf","numpy.isinf","numpy.isinf(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'isinf'>","Test element-wise for positive or negative infinity."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.islower.html#numpy.char.islower","numpy.char.islower","numpy.char.islower(a)","Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character\, false otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isnan.html#numpy.isnan","numpy.isnan","numpy.isnan(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'isnan'>","Test element-wise for NaN and return result as a boolean array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isnat.html#numpy.isnat","numpy.isnat","numpy.isnat(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'isnat'>","Test element-wise for NaT (not a time) and return result as a boolean array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isneginf.html#numpy.isneginf","numpy.isneginf","numpy.isneginf(x\, out=None)","Test element-wise for negative infinity\, return result as bool array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isnumeric.html#numpy.char.isnumeric","numpy.char.isnumeric","numpy.char.isnumeric(a)","For each element\, return True if there are only numeric characters in the element."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isposinf.html#numpy.isposinf","numpy.isposinf","numpy.isposinf(x\, out=None)","Test element-wise for positive infinity\, return result as bool array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isreal.html#numpy.isreal","numpy.isreal","numpy.isreal(x)","Returns a bool array\, where True if input element is real."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isrealobj.html#numpy.isrealobj","numpy.isrealobj","numpy.isrealobj(x)","Return True if x is a not complex type or an array of complex numbers."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.isscalar.html#numpy.isscalar","numpy.isscalar","numpy.isscalar(num)","Returns True if the type of num is a scalar type."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.issctype.html#numpy.issctype","numpy.issctype","numpy.issctype(rep)","Determines whether the given object represents a scalar data-type."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isspace.html#numpy.char.isspace","numpy.char.isspace","numpy.char.isspace(a)","Returns true for each element if there are only whitespace characters in the string and there is at least one character\, false otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.issubclass_.html#numpy.issubclass_","numpy.issubclass_","numpy.issubclass_(arg1\, arg2)","Determine if a class is a subclass of a second class."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.issubdtype.html#numpy.issubdtype","numpy.issubdtype","numpy.issubdtype(arg1\, arg2)","Returns True if first argument is a typecode lower/equal in type hierarchy."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.issubsctype.html#numpy.issubsctype","numpy.issubsctype","numpy.issubsctype(arg1\, arg2)","Determine if the first argument is a subclass of the second argument."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.istitle.html#numpy.char.istitle","numpy.char.istitle","numpy.char.istitle(a)","Returns true for each element if the element is a titlecased string and there is at least one character\, false otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.isupper.html#numpy.char.isupper","numpy.char.isupper","numpy.char.isupper(a)","Returns true for each element if all cased characters in the string are uppercase and there is at least one character\, false otherwise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ix_.html#numpy.ix_","numpy.ix_","numpy.ix_(*args)","Construct an open mesh from multiple sequences."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.join.html#numpy.char.join","numpy.char.join","numpy.char.join(sep\, seq)","Return a string which is the concatenation of the strings in the sequence seq."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.join_by","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.kaiser.html#numpy.kaiser","numpy.kaiser","numpy.kaiser(M\, beta)","Return the Kaiser window."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.decorators.knownfailureif.html#numpy.testing.decorators.knownfailureif","numpy.testing.decorators.knownfailureif","numpy.testing.decorators.knownfailureif(fail_condition\, msg=None)","Make function raise KnownFailureException exception if given condition is true."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.kron.html#numpy.kron","numpy.kron","numpy.kron(a\, b)","Kronecker product of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lag2poly.html#numpy.polynomial.laguerre.lag2poly","numpy.polynomial.laguerre.lag2poly","numpy.polynomial.laguerre.lag2poly(c)","Convert a Laguerre series to a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagadd.html#numpy.polynomial.laguerre.lagadd","numpy.polynomial.laguerre.lagadd","numpy.polynomial.laguerre.lagadd(c1\, c2)","Add one Laguerre series to another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagcompanion.html#numpy.polynomial.laguerre.lagcompanion","numpy.polynomial.laguerre.lagcompanion","numpy.polynomial.laguerre.lagcompanion(c)","Return the companion matrix of c."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagder.html#numpy.polynomial.laguerre.lagder","numpy.polynomial.laguerre.lagder","numpy.polynomial.laguerre.lagder(c\, m=1\, scl=1\, axis=0)","Differentiate a Laguerre series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagdiv.html#numpy.polynomial.laguerre.lagdiv","numpy.polynomial.laguerre.lagdiv","numpy.polynomial.laguerre.lagdiv(c1\, c2)","Divide one Laguerre series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagdomain.html#numpy.polynomial.laguerre.lagdomain","numpy.polynomial.laguerre.lagdomain = array","numpy.polynomial.laguerre.lagdomain = array([0\, 1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagfit.html#numpy.polynomial.laguerre.lagfit","numpy.polynomial.laguerre.lagfit","numpy.polynomial.laguerre.lagfit(x\, y\, deg\, rcond=None\, full=False\, w=None)","Least squares fit of Laguerre series to data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagfromroots.html#numpy.polynomial.laguerre.lagfromroots","numpy.polynomial.laguerre.lagfromroots","numpy.polynomial.laguerre.lagfromroots(roots)","Generate a Laguerre series with given roots."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.laggauss.html#numpy.polynomial.laguerre.laggauss","numpy.polynomial.laguerre.laggauss","numpy.polynomial.laguerre.laggauss(deg)","Gauss-Laguerre quadrature."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.laggrid2d.html#numpy.polynomial.laguerre.laggrid2d","numpy.polynomial.laguerre.laggrid2d","numpy.polynomial.laguerre.laggrid2d(x\, y\, c)","Evaluate a 2-D Laguerre series on the Cartesian product of x and y."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.laggrid3d.html#numpy.polynomial.laguerre.laggrid3d","numpy.polynomial.laguerre.laggrid3d","numpy.polynomial.laguerre.laggrid3d(x\, y\, z\, c)","Evaluate a 3-D Laguerre series on the Cartesian product of x\, y\, and z."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagint.html#numpy.polynomial.laguerre.lagint","numpy.polynomial.laguerre.lagint","numpy.polynomial.laguerre.lagint(c\, m=1\, k=[]\, lbnd=0\, scl=1\, axis=0)","Integrate a Laguerre series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagline.html#numpy.polynomial.laguerre.lagline","numpy.polynomial.laguerre.lagline","numpy.polynomial.laguerre.lagline(off\, scl)","Laguerre series whose graph is a straight line."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagmul.html#numpy.polynomial.laguerre.lagmul","numpy.polynomial.laguerre.lagmul","numpy.polynomial.laguerre.lagmul(c1\, c2)","Multiply one Laguerre series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagmulx.html#numpy.polynomial.laguerre.lagmulx","numpy.polynomial.laguerre.lagmulx","numpy.polynomial.laguerre.lagmulx(c)","Multiply a Laguerre series by x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagone.html#numpy.polynomial.laguerre.lagone","numpy.polynomial.laguerre.lagone = array","numpy.polynomial.laguerre.lagone = array([1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagpow.html#numpy.polynomial.laguerre.lagpow","numpy.polynomial.laguerre.lagpow","numpy.polynomial.laguerre.lagpow(c\, pow\, maxpower=16)","Raise a Laguerre series to a power."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagroots.html#numpy.polynomial.laguerre.lagroots","numpy.polynomial.laguerre.lagroots","numpy.polynomial.laguerre.lagroots(c)","Compute the roots of a Laguerre series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagsub.html#numpy.polynomial.laguerre.lagsub","numpy.polynomial.laguerre.lagsub","numpy.polynomial.laguerre.lagsub(c1\, c2)","Subtract one Laguerre series from another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagtrim.html#numpy.polynomial.laguerre.lagtrim","numpy.polynomial.laguerre.lagtrim","numpy.polynomial.laguerre.lagtrim(c\, tol=0)","Remove “small” “trailing” coefficients from a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagval.html#numpy.polynomial.laguerre.lagval","numpy.polynomial.laguerre.lagval","numpy.polynomial.laguerre.lagval(x\, c\, tensor=True)","Evaluate a Laguerre series at points x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagval2d.html#numpy.polynomial.laguerre.lagval2d","numpy.polynomial.laguerre.lagval2d","numpy.polynomial.laguerre.lagval2d(x\, y\, c)","Evaluate a 2-D Laguerre series at points (x\, y)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagval3d.html#numpy.polynomial.laguerre.lagval3d","numpy.polynomial.laguerre.lagval3d","numpy.polynomial.laguerre.lagval3d(x\, y\, z\, c)","Evaluate a 3-D Laguerre series at points (x\, y\, z)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagvander.html#numpy.polynomial.laguerre.lagvander","numpy.polynomial.laguerre.lagvander","numpy.polynomial.laguerre.lagvander(x\, deg)","Pseudo-Vandermonde matrix of given degree."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagvander2d.html#numpy.polynomial.laguerre.lagvander2d","numpy.polynomial.laguerre.lagvander2d","numpy.polynomial.laguerre.lagvander2d(x\, y\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagvander3d.html#numpy.polynomial.laguerre.lagvander3d","numpy.polynomial.laguerre.lagvander3d","numpy.polynomial.laguerre.lagvander3d(x\, y\, z\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagweight.html#numpy.polynomial.laguerre.lagweight","numpy.polynomial.laguerre.lagweight","numpy.polynomial.laguerre.lagweight(x)","Weight function of the Laguerre polynomials."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagx.html#numpy.polynomial.laguerre.lagx","numpy.polynomial.laguerre.lagx = array","numpy.polynomial.laguerre.lagx = array([ 1\, -1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.lagzero.html#numpy.polynomial.laguerre.lagzero","numpy.polynomial.laguerre.lagzero = array","numpy.polynomial.laguerre.lagzero = array([0])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lcm.html#numpy.lcm","numpy.lcm","numpy.lcm(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'lcm'>","Returns the lowest common multiple of |x1| and |x2|"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ldexp.html#numpy.ldexp","numpy.ldexp","numpy.ldexp(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'ldexp'>","Returns x1 * 2**x2\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.left_shift.html#numpy.left_shift","numpy.left_shift","numpy.left_shift(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'left_shift'>","Shift the bits of an integer to the left."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.leg2poly.html#numpy.polynomial.legendre.leg2poly","numpy.polynomial.legendre.leg2poly","numpy.polynomial.legendre.leg2poly(c)","Convert a Legendre series to a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legadd.html#numpy.polynomial.legendre.legadd","numpy.polynomial.legendre.legadd","numpy.polynomial.legendre.legadd(c1\, c2)","Add one Legendre series to another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legcompanion.html#numpy.polynomial.legendre.legcompanion","numpy.polynomial.legendre.legcompanion","numpy.polynomial.legendre.legcompanion(c)","Return the scaled companion matrix of c."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legder.html#numpy.polynomial.legendre.legder","numpy.polynomial.legendre.legder","numpy.polynomial.legendre.legder(c\, m=1\, scl=1\, axis=0)","Differentiate a Legendre series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legdiv.html#numpy.polynomial.legendre.legdiv","numpy.polynomial.legendre.legdiv","numpy.polynomial.legendre.legdiv(c1\, c2)","Divide one Legendre series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legdomain.html#numpy.polynomial.legendre.legdomain","numpy.polynomial.legendre.legdomain = array","numpy.polynomial.legendre.legdomain = array([-1\,  1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legfit.html#numpy.polynomial.legendre.legfit","numpy.polynomial.legendre.legfit","numpy.polynomial.legendre.legfit(x\, y\, deg\, rcond=None\, full=False\, w=None)","Least squares fit of Legendre series to data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legfromroots.html#numpy.polynomial.legendre.legfromroots","numpy.polynomial.legendre.legfromroots","numpy.polynomial.legendre.legfromroots(roots)","Generate a Legendre series with given roots."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.leggauss.html#numpy.polynomial.legendre.leggauss","numpy.polynomial.legendre.leggauss","numpy.polynomial.legendre.leggauss(deg)","Gauss-Legendre quadrature."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.leggrid2d.html#numpy.polynomial.legendre.leggrid2d","numpy.polynomial.legendre.leggrid2d","numpy.polynomial.legendre.leggrid2d(x\, y\, c)","Evaluate a 2-D Legendre series on the Cartesian product of x and y."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.leggrid3d.html#numpy.polynomial.legendre.leggrid3d","numpy.polynomial.legendre.leggrid3d","numpy.polynomial.legendre.leggrid3d(x\, y\, z\, c)","Evaluate a 3-D Legendre series on the Cartesian product of x\, y\, and z."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legint.html#numpy.polynomial.legendre.legint","numpy.polynomial.legendre.legint","numpy.polynomial.legendre.legint(c\, m=1\, k=[]\, lbnd=0\, scl=1\, axis=0)","Integrate a Legendre series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legline.html#numpy.polynomial.legendre.legline","numpy.polynomial.legendre.legline","numpy.polynomial.legendre.legline(off\, scl)","Legendre series whose graph is a straight line."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legmul.html#numpy.polynomial.legendre.legmul","numpy.polynomial.legendre.legmul","numpy.polynomial.legendre.legmul(c1\, c2)","Multiply one Legendre series by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legmulx.html#numpy.polynomial.legendre.legmulx","numpy.polynomial.legendre.legmulx","numpy.polynomial.legendre.legmulx(c)","Multiply a Legendre series by x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legone.html#numpy.polynomial.legendre.legone","numpy.polynomial.legendre.legone = array","numpy.polynomial.legendre.legone = array([1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legpow.html#numpy.polynomial.legendre.legpow","numpy.polynomial.legendre.legpow","numpy.polynomial.legendre.legpow(c\, pow\, maxpower=16)","Raise a Legendre series to a power."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legroots.html#numpy.polynomial.legendre.legroots","numpy.polynomial.legendre.legroots","numpy.polynomial.legendre.legroots(c)","Compute the roots of a Legendre series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legsub.html#numpy.polynomial.legendre.legsub","numpy.polynomial.legendre.legsub","numpy.polynomial.legendre.legsub(c1\, c2)","Subtract one Legendre series from another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legtrim.html#numpy.polynomial.legendre.legtrim","numpy.polynomial.legendre.legtrim","numpy.polynomial.legendre.legtrim(c\, tol=0)","Remove “small” “trailing” coefficients from a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legval.html#numpy.polynomial.legendre.legval","numpy.polynomial.legendre.legval","numpy.polynomial.legendre.legval(x\, c\, tensor=True)","Evaluate a Legendre series at points x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legval2d.html#numpy.polynomial.legendre.legval2d","numpy.polynomial.legendre.legval2d","numpy.polynomial.legendre.legval2d(x\, y\, c)","Evaluate a 2-D Legendre series at points (x\, y)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legval3d.html#numpy.polynomial.legendre.legval3d","numpy.polynomial.legendre.legval3d","numpy.polynomial.legendre.legval3d(x\, y\, z\, c)","Evaluate a 3-D Legendre series at points (x\, y\, z)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legvander.html#numpy.polynomial.legendre.legvander","numpy.polynomial.legendre.legvander","numpy.polynomial.legendre.legvander(x\, deg)","Pseudo-Vandermonde matrix of given degree."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legvander2d.html#numpy.polynomial.legendre.legvander2d","numpy.polynomial.legendre.legvander2d","numpy.polynomial.legendre.legvander2d(x\, y\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legvander3d.html#numpy.polynomial.legendre.legvander3d","numpy.polynomial.legendre.legvander3d","numpy.polynomial.legendre.legvander3d(x\, y\, z\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legweight.html#numpy.polynomial.legendre.legweight","numpy.polynomial.legendre.legweight","numpy.polynomial.legendre.legweight(x)","Weight function of the Legendre polynomials."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legx.html#numpy.polynomial.legendre.legx","numpy.polynomial.legendre.legx = array","numpy.polynomial.legendre.legx = array([0\, 1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.legzero.html#numpy.polynomial.legendre.legzero","numpy.polynomial.legendre.legzero = array","numpy.polynomial.legendre.legzero = array([0])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.less.html#numpy.less","numpy.less","numpy.less(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'less'>","Return the truth value of (x1 < x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.less.html#numpy.char.less","numpy.char.less","numpy.char.less(x1\, x2)","Return (x1 < x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.less_equal.html#numpy.less_equal","numpy.less_equal","numpy.less_equal(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'less_equal'>","Return the truth value of (x1 =< x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.less_equal.html#numpy.char.less_equal","numpy.char.less_equal","numpy.char.less_equal(x1\, x2)","Return (x1 <= x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lexsort.html#numpy.lexsort","numpy.lexsort","numpy.lexsort(keys\, axis=-1)","Perform an indirect stable sort using a sequence of keys."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html#numpy.linspace","numpy.linspace","numpy.linspace(start\, stop\, num=50\, endpoint=True\, retstep=False\, dtype=None\, axis=0)","Return evenly spaced numbers over a specified interval."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.ljust.html#numpy.char.ljust","numpy.char.ljust","numpy.char.ljust(a\, width\, fillchar=' ')","Return an array with the elements of a left-justified in a string of length width."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.load.html#numpy.load","numpy.load","numpy.load(file\, mmap_mode=None\, allow_pickle=False\, fix_imports=True\, encoding='ASCII')","Load arrays or pickled objects from .npy\, .npz or pickled files."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.load.html#numpy.ma.load","numpy.ma.load","numpy.ma.load(F)","Wrapper around cPickle.load which accepts either a file-like object or a filename."
"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.load_library","numpy.ctypeslib.as_array","numpy.ctypeslib.as_array(obj\, shape=None)","Create a numpy array from a ctypes array or POINTER."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.loads.html#numpy.ma.loads","numpy.ma.loads","numpy.ma.loads(strg)","Load a pickle from the current string."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html#numpy.loadtxt","numpy.loadtxt","numpy.loadtxt(fname\, dtype=<class 'float'>\, comments='#'\, delimiter=None\, converters=None\, skiprows=0\, usecols=None\, unpack=False\, ndmin=0\, encoding='bytes'\, max_rows=None)","Load data from a text file."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.log.html#numpy.log","numpy.log","numpy.log(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'log'>","Natural logarithm\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.log10.html#numpy.log10","numpy.log10","numpy.log10(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'log10'>","Return the base 10 logarithm of the input array\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.log1p.html#numpy.log1p","numpy.log1p","numpy.log1p(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'log1p'>","Return the natural logarithm of one plus the input array\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.log2.html#numpy.log2","numpy.log2","numpy.log2(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'log2'>","Base-2 logarithm of x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logaddexp.html#numpy.logaddexp","numpy.logaddexp","numpy.logaddexp(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'logaddexp'>","Logarithm of the sum of exponentiations of the inputs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logaddexp2.html#numpy.logaddexp2","numpy.logaddexp2","numpy.logaddexp2(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'logaddexp2'>","Logarithm of the sum of exponentiations of the inputs in base-2."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html#numpy.logical_and","numpy.logical_and","numpy.logical_and(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'logical_and'>","Compute the truth value of x1 AND x2 element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_not.html#numpy.logical_not","numpy.logical_not","numpy.logical_not(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'logical_not'>","Compute the truth value of NOT x element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html#numpy.logical_or","numpy.logical_or","numpy.logical_or(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'logical_or'>","Compute the truth value of x1 OR x2 element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_xor.html#numpy.logical_xor","numpy.logical_xor","numpy.logical_xor(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'logical_xor'>","Compute the truth value of x1 XOR x2\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logspace.html#numpy.logspace","numpy.logspace","numpy.logspace(start\, stop\, num=50\, endpoint=True\, base=10.0\, dtype=None\, axis=0)","Return numbers spaced evenly on a log scale."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.lookfor.html#numpy.lookfor","numpy.lookfor","numpy.lookfor(what\, module=None\, import_modules=True\, regenerate=False\, output=None)","Do a keyword search on docstrings."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.lower.html#numpy.char.lower","numpy.char.lower","numpy.char.lower(a)","Return an array with the elements converted to lowercase."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.lstrip.html#numpy.char.lstrip","numpy.char.lstrip","numpy.char.lstrip(a\, chars=None)","For each element in a\, return a copy with the leading characters removed."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.lstsq.html#numpy.linalg.lstsq","numpy.linalg.lstsq","numpy.linalg.lstsq(a\, b\, rcond='warn')","Return the least-squares solution to a linear matrix equation."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.make_mask.html#numpy.ma.make_mask","numpy.ma.make_mask","numpy.ma.make_mask(m\, copy=False\, shrink=True\, dtype=<class 'numpy.bool_'>)","Create a boolean mask from an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr","numpy.ma.make_mask_descr","numpy.ma.make_mask_descr(ndtype)","Construct a dtype description list from a given dtype."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none","numpy.ma.make_mask_none","numpy.ma.make_mask_none(newshape\, dtype=None)","Return a boolean mask of the given shape\, filled with False."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.mapdomain.html#numpy.polynomial.polyutils.mapdomain","numpy.polynomial.polyutils.mapdomain","numpy.polynomial.polyutils.mapdomain(x\, old\, new)","Apply linear map to input points."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.mapparms.html#numpy.polynomial.polyutils.mapparms","numpy.polynomial.polyutils.mapparms","numpy.polynomial.polyutils.mapparms(old\, new)","Linear map parameters between domains."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols","numpy.ma.mask_cols","numpy.ma.mask_cols(a\, axis=None)","Mask columns of a 2D array that contain masked values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mask_indices.html#numpy.mask_indices","numpy.mask_indices","numpy.mask_indices(n\, mask_func\, k=0)","Return the indices to access (n\, n) arrays\, given a masking function."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mask_or.html#numpy.ma.mask_or","numpy.ma.mask_or","numpy.ma.mask_or(m1\, m2\, copy=False\, shrink=True)","Combine two masks with the logical_or operator."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols","numpy.ma.mask_rowcols","numpy.ma.mask_rowcols(a\, axis=None)","Mask rows and/or columns of a 2D array that contain masked values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows","numpy.ma.mask_rows","numpy.ma.mask_rows(a\, axis=None)","Mask rows of a 2D array that contain masked values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_all.html#numpy.ma.masked_all","numpy.ma.masked_all","numpy.ma.masked_all(shape\, dtype=<class 'float'>)","Empty masked array with all elements masked."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like","numpy.ma.masked_all_like","numpy.ma.masked_all_like(arr)","Empty masked array with the properties of an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal","numpy.ma.masked_equal","numpy.ma.masked_equal(x\, value\, copy=True)","Mask an array where equal to a given value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater","numpy.ma.masked_greater","numpy.ma.masked_greater(x\, value\, copy=True)","Mask an array where greater than a given value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal","numpy.ma.masked_greater_equal","numpy.ma.masked_greater_equal(x\, value\, copy=True)","Mask an array where greater than or equal to a given value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside","numpy.ma.masked_inside","numpy.ma.masked_inside(x\, v1\, v2\, copy=True)","Mask an array inside a given interval."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid","numpy.ma.masked_invalid","numpy.ma.masked_invalid(a\, copy=True)","Mask an array where invalid values occur (NaNs or infs)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_less.html#numpy.ma.masked_less","numpy.ma.masked_less","numpy.ma.masked_less(x\, value\, copy=True)","Mask an array where less than a given value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal","numpy.ma.masked_less_equal","numpy.ma.masked_less_equal(x\, value\, copy=True)","Mask an array where less than or equal to a given value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal","numpy.ma.masked_not_equal","numpy.ma.masked_not_equal(x\, value\, copy=True)","Mask an array where not equal to a given value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_object.html#numpy.ma.masked_object","numpy.ma.masked_object","numpy.ma.masked_object(x\, value\, copy=True\, shrink=True)","Mask the array x where the data are exactly equal to value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside","numpy.ma.masked_outside","numpy.ma.masked_outside(x\, v1\, v2\, copy=True)","Mask an array outside a given interval."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_values.html#numpy.ma.masked_values","numpy.ma.masked_values","numpy.ma.masked_values(x\, value\, rtol=1e-05\, atol=1e-08\, copy=True\, shrink=True)","Mask using floating point equality."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.masked_where.html#numpy.ma.masked_where","numpy.ma.masked_where","numpy.ma.masked_where(condition\, a\, copy=True)","Mask an array where a condition is met."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mat.html#numpy.mat","numpy.mat","numpy.mat(data\, dtype=None)","Interpret the input as a matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matmul.html#numpy.matmul","numpy.matmul","numpy.matmul(x1\, x2\, /\, out=None\, *\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'matmul'>","Matrix product of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.matrix_power.html#numpy.linalg.matrix_power","numpy.linalg.matrix_power","numpy.linalg.matrix_power(a\, n)","Raise a square matrix to the (integer) power n."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.matrix_rank.html#numpy.linalg.matrix_rank","numpy.linalg.matrix_rank","numpy.linalg.matrix_rank(M\, tol=None\, hermitian=False)","Return matrix rank of array using SVD method"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.max.html#numpy.ma.max","numpy.ma.max","numpy.ma.max(obj\, axis=None\, out=None\, fill_value=None\, keepdims=<no value>)","Return the maximum along a given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.maximum.html#numpy.maximum","numpy.maximum","numpy.maximum(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'maximum'>","Element-wise maximum of array elements."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value","numpy.ma.maximum_fill_value","numpy.ma.maximum_fill_value(obj)","Return the minimum value that can be represented by the dtype of an object."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.maximum_sctype.html#numpy.maximum_sctype","numpy.maximum_sctype","numpy.maximum_sctype(t)","Return the scalar type of highest precision of the same kind as the input."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.may_share_memory.html#numpy.may_share_memory","numpy.may_share_memory","numpy.may_share_memory(a\, b\, max_work=None)","Determine if two arrays might share memory"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.mean.html#numpy.ma.mean","numpy.ma.mean","numpy.ma.mean(self\, axis=None\, dtype=None\, out=None\, keepdims=<no value>) = <numpy.ma.core._frommethod object>","Returns the average of the array elements along given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html#numpy.mean","numpy.mean","numpy.mean(a\, axis=None\, dtype=None\, out=None\, keepdims=<no value>)","Compute the arithmetic mean along the specified axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.median.html#numpy.median","numpy.median","numpy.median(a\, axis=None\, out=None\, overwrite_input=False\, keepdims=False)","Compute the median along the specified axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.median.html#numpy.ma.median","numpy.ma.median","numpy.ma.median(a\, axis=None\, out=None\, overwrite_input=False\, keepdims=False)","Compute the median along the specified axis."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.merge_arrays","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html#numpy.meshgrid","numpy.meshgrid","numpy.meshgrid(*xi\, **kwargs)","Return coordinate matrices from coordinate vectors."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.min.html#numpy.ma.min","numpy.ma.min","numpy.ma.min(obj\, axis=None\, out=None\, fill_value=None\, keepdims=<no value>)","Return the minimum along a given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.min_scalar_type.html#numpy.min_scalar_type","numpy.min_scalar_type","numpy.min_scalar_type(a)","For scalar a\, returns the data type with the smallest size and smallest scalar kind which can hold its value.  For non-scalar array a\, returns the vector’s dtype unmodified."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.minimum.html#numpy.minimum","numpy.minimum","numpy.minimum(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'minimum'>","Element-wise minimum of array elements."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mintypecode.html#numpy.mintypecode","numpy.mintypecode","numpy.mintypecode(typechars\, typeset='GDFgdf'\, default='d')","Return the character for the minimum-size type to which given types can be safely cast."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mirr.html#numpy.mirr","numpy.mirr","numpy.mirr(values\, finance_rate\, reinvest_rate)","Modified internal rate of return."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.mod.html#numpy.mod","numpy.mod","numpy.mod(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'remainder'>","Return element-wise remainder of division."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.mod.html#numpy.char.mod","numpy.char.mod","numpy.char.mod(a\, values)","Return (a % i)\, that is pre-Python 2.6 string formatting (iterpolation)\, element-wise for a pair of array_likes of str or unicode."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.modf.html#numpy.modf","numpy.modf","numpy.modf(x\, [out1\, out2\, ]/\, [out=(None\, None)\, ]*\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'modf'>","Return the fractional and integral parts of an array\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.moveaxis.html#numpy.moveaxis","numpy.moveaxis","numpy.moveaxis(a\, source\, destination)","Move axes of an array to new positions."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.msort.html#numpy.msort","numpy.msort","numpy.msort(a)","Return a copy of an array sorted along the first axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.multi_dot.html#numpy.linalg.multi_dot","numpy.linalg.multi_dot","numpy.linalg.multi_dot(arrays)","Compute the dot product of two or more arrays in a single function call\, while automatically selecting the fastest evaluation order."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.multiply.html#numpy.multiply","numpy.multiply","numpy.multiply(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'multiply'>","Multiply arguments element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.multiply.html#numpy.char.multiply","numpy.char.multiply","numpy.char.multiply(a\, i)","Return (a * i)\, that is string multiple concatenation\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nan_to_num.html#numpy.nan_to_num","numpy.nan_to_num","numpy.nan_to_num(x\, copy=True\, nan=0.0\, posinf=None\, neginf=None)","Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the nan\,  posinf and/or neginf keywords."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanargmax.html#numpy.nanargmax","numpy.nanargmax","numpy.nanargmax(a\, axis=None)","Return the indices of the maximum values in the specified axis ignoring NaNs. For all-NaN slices ValueError is raised. Warning: the results cannot be trusted if a slice contains only NaNs and -Infs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanargmin.html#numpy.nanargmin","numpy.nanargmin","numpy.nanargmin(a\, axis=None)","Return the indices of the minimum values in the specified axis ignoring NaNs. For all-NaN slices ValueError is raised. Warning: the results cannot be trusted if a slice contains only NaNs and Infs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nancumprod.html#numpy.nancumprod","numpy.nancumprod","numpy.nancumprod(a\, axis=None\, dtype=None\, out=None)","Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one.  The cumulative product does not change when NaNs are encountered and leading NaNs are replaced by ones."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nancumsum.html#numpy.nancumsum","numpy.nancumsum","numpy.nancumsum(a\, axis=None\, dtype=None\, out=None)","Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.  The cumulative sum does not change when NaNs are encountered and leading NaNs are replaced by zeros."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmax.html#numpy.nanmax","numpy.nanmax","numpy.nanmax(a\, axis=None\, out=None\, keepdims=<no value>)","Return the maximum of an array or maximum along an axis\, ignoring any NaNs.  When all-NaN slices are encountered a RuntimeWarning is raised and NaN is returned for that slice."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmean.html#numpy.nanmean","numpy.nanmean","numpy.nanmean(a\, axis=None\, dtype=None\, out=None\, keepdims=<no value>)","Compute the arithmetic mean along the specified axis\, ignoring NaNs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmedian.html#numpy.nanmedian","numpy.nanmedian","numpy.nanmedian(a\, axis=None\, out=None\, overwrite_input=False\, keepdims=<no value>)","Compute the median along the specified axis\, while ignoring NaNs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanmin.html#numpy.nanmin","numpy.nanmin","numpy.nanmin(a\, axis=None\, out=None\, keepdims=<no value>)","Return minimum of an array or minimum along an axis\, ignoring any NaNs. When all-NaN slices are encountered a RuntimeWarning is raised and Nan is returned for that slice."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanpercentile.html#numpy.nanpercentile","numpy.nanpercentile","numpy.nanpercentile(a\, q\, axis=None\, out=None\, overwrite_input=False\, interpolation='linear'\, keepdims=<no value>)","Compute the qth percentile of the data along the specified axis\, while ignoring nan values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanprod.html#numpy.nanprod","numpy.nanprod","numpy.nanprod(a\, axis=None\, dtype=None\, out=None\, keepdims=<no value>)","Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanquantile.html#numpy.nanquantile","numpy.nanquantile","numpy.nanquantile(a\, q\, axis=None\, out=None\, overwrite_input=False\, interpolation='linear'\, keepdims=<no value>)","Compute the qth quantile of the data along the specified axis\, while ignoring nan values. Returns the qth quantile(s) of the array elements."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanstd.html#numpy.nanstd","numpy.nanstd","numpy.nanstd(a\, axis=None\, dtype=None\, out=None\, ddof=0\, keepdims=<no value>)","Compute the standard deviation along the specified axis\, while ignoring NaNs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nansum.html#numpy.nansum","numpy.nansum","numpy.nansum(a\, axis=None\, dtype=None\, out=None\, keepdims=<no value>)","Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nanvar.html#numpy.nanvar","numpy.nanvar","numpy.nanvar(a\, axis=None\, dtype=None\, out=None\, ddof=0\, keepdims=<no value>)","Compute the variance along the specified axis\, while ignoring NaNs."
"https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html#numpy.ctypeslib.ndpointer","numpy.ctypeslib.as_array","numpy.ctypeslib.as_array(obj\, shape=None)","Create a numpy array from a ctypes array or POINTER."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.negative.html#numpy.negative","numpy.negative","numpy.negative(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'negative'>","Numerical negative\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nested_iters.html#numpy.nested_iters","numpy.nested_iters","numpy.nested_iters()","Create nditers for use in nested loops"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nextafter.html#numpy.nextafter","numpy.nextafter","numpy.nextafter(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'nextafter'>","Return the next floating-point value after x1 towards x2\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.nonzero.html#numpy.ma.nonzero","numpy.ma.nonzero","numpy.ma.nonzero(self) = <numpy.ma.core._frommethod object>","Return the indices of unmasked elements that are not zero."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html#numpy.nonzero","numpy.nonzero","numpy.nonzero(a)","Return the indices of the elements that are non-zero."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html#numpy.linalg.norm","numpy.linalg.norm","numpy.linalg.norm(x\, ord=None\, axis=None\, keepdims=False)","Matrix or vector norm."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.not_equal.html#numpy.not_equal","numpy.not_equal","numpy.not_equal(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'not_equal'>","Return (x1 != x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.not_equal.html#numpy.char.not_equal","numpy.char.not_equal","numpy.char.not_equal(x1\, x2)","Return (x1 != x2) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous","numpy.ma.notmasked_contiguous","numpy.ma.notmasked_contiguous(a\, axis=None)","Find contiguous unmasked data in a masked array along the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges","numpy.ma.notmasked_edges","numpy.ma.notmasked_edges(a\, axis=None)","Find the indices of the first and last unmasked values along an axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nper.html#numpy.nper","numpy.nper","numpy.nper(rate\, pmt\, pv\, fv=0\, when='end')","Compute the number of periodic payments."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.npv.html#numpy.npv","numpy.npv","numpy.npv(rate\, values)","Returns the NPV (Net Present Value) of a cash flow series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.obj2sctype.html#numpy.obj2sctype","numpy.obj2sctype","numpy.obj2sctype(rep\, default=None)","Return the scalar dtype or NumPy equivalent of Python type of an object."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.ones.html#numpy.ma.ones","numpy.ma.ones","numpy.ma.ones(shape\, dtype=None\, order='C') = <numpy.ma.core._convert2ma object>","Return a new array of given shape and type\, filled with ones."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html#numpy.ones","numpy.ones","numpy.ones(shape\, dtype=None\, order='C')","Return a new array of given shape and type\, filled with ones."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.ones.html#numpy.matlib.ones","numpy.matlib.ones","numpy.matlib.ones(shape\, dtype=None\, order='C')","Matrix of ones."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones_like.html#numpy.ones_like","numpy.ones_like","numpy.ones_like(a\, dtype=None\, order='K'\, subok=True\, shape=None)","Return an array of ones with the same shape and type as a given array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.outer.html#numpy.outer","numpy.outer","numpy.outer(a\, b\, out=None)","Compute the outer product of two vectors."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.outer.html#numpy.ma.outer","numpy.ma.outer","numpy.ma.outer(a\, b)","Compute the outer product of two vectors."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct","numpy.ma.outerproduct","numpy.ma.outerproduct(a\, b)","Compute the outer product of two vectors."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.packbits.html#numpy.packbits","numpy.packbits","numpy.packbits(a\, axis=None\, bitorder='big')","Packs the elements of a binary-valued array into bits in a uint8 array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.pad.html#numpy.pad","numpy.pad","numpy.pad(array\, pad_width\, mode='constant'\, **kwargs)","Pad an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html#numpy.partition","numpy.partition","numpy.partition(a\, kth\, axis=-1\, kind='introselect'\, order=None)","Return a partitioned copy of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.partition.html#numpy.char.partition","numpy.char.partition","numpy.char.partition(a\, sep)","Partition each element in a around sep."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.percentile.html#numpy.percentile","numpy.percentile","numpy.percentile(a\, q\, axis=None\, out=None\, overwrite_input=False\, interpolation='linear'\, keepdims=False)","Compute the q-th percentile of the data along the specified axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.piecewise.html#numpy.piecewise","numpy.piecewise","numpy.piecewise(x\, condlist\, funclist\, *args\, **kw)","Evaluate a piecewise-defined function."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.pinv.html#numpy.linalg.pinv","numpy.linalg.pinv","numpy.linalg.pinv(a\, rcond=1e-15\, hermitian=False)","Compute the (Moore-Penrose) pseudo-inverse of a matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.place.html#numpy.place","numpy.place","numpy.place(arr\, mask\, vals)","Change elements of an array based on conditional and input values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.pmt.html#numpy.pmt","numpy.pmt","numpy.pmt(rate\, nper\, pv\, fv=0\, when='end')","Compute the payment against loan principal plus interest."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.poly.html#numpy.poly","numpy.poly","numpy.poly(seq_of_zeros)","Find the coefficients of a polynomial with the given sequence of roots."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.chebyshev.poly2cheb.html#numpy.polynomial.chebyshev.poly2cheb","numpy.polynomial.chebyshev.poly2cheb","numpy.polynomial.chebyshev.poly2cheb(pol)","Convert a polynomial to a Chebyshev series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite.poly2herm.html#numpy.polynomial.hermite.poly2herm","numpy.polynomial.hermite.poly2herm","numpy.polynomial.hermite.poly2herm(pol)","Convert a polynomial to a Hermite series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.hermite_e.poly2herme.html#numpy.polynomial.hermite_e.poly2herme","numpy.polynomial.hermite_e.poly2herme","numpy.polynomial.hermite_e.poly2herme(pol)","Convert a polynomial to a Hermite series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.laguerre.poly2lag.html#numpy.polynomial.laguerre.poly2lag","numpy.polynomial.laguerre.poly2lag","numpy.polynomial.laguerre.poly2lag(pol)","Convert a polynomial to a Laguerre series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.legendre.poly2leg.html#numpy.polynomial.legendre.poly2leg","numpy.polynomial.legendre.poly2leg","numpy.polynomial.legendre.poly2leg(pol)","Convert a polynomial to a Legendre series."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyadd.html#numpy.polyadd","numpy.polyadd","numpy.polyadd(a1\, a2)","Find the sum of two polynomials."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyadd.html#numpy.polynomial.polynomial.polyadd","numpy.polynomial.polynomial.polyadd","numpy.polynomial.polynomial.polyadd(c1\, c2)","Add one polynomial to another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polycompanion.html#numpy.polynomial.polynomial.polycompanion","numpy.polynomial.polynomial.polycompanion","numpy.polynomial.polynomial.polycompanion(c)","Return the companion matrix of c."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyder.html#numpy.polyder","numpy.polyder","numpy.polyder(p\, m=1)","Return the derivative of the specified order of a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyder.html#numpy.polynomial.polynomial.polyder","numpy.polynomial.polynomial.polyder","numpy.polynomial.polynomial.polyder(c\, m=1\, scl=1\, axis=0)","Differentiate a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polydiv.html#numpy.polydiv","numpy.polydiv","numpy.polydiv(u\, v)","Returns the quotient and remainder of polynomial division."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polydiv.html#numpy.polynomial.polynomial.polydiv","numpy.polynomial.polynomial.polydiv","numpy.polynomial.polynomial.polydiv(c1\, c2)","Divide one polynomial by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polydomain.html#numpy.polynomial.polynomial.polydomain","numpy.polynomial.polynomial.polydomain = array","numpy.polynomial.polynomial.polydomain = array([-1\,  1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyfit.html#numpy.polyfit","numpy.polyfit","numpy.polyfit(x\, y\, deg\, rcond=None\, full=False\, w=None\, cov=False)","Least squares polynomial fit."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.polyfit.html#numpy.ma.polyfit","numpy.ma.polyfit","numpy.ma.polyfit(x\, y\, deg\, rcond=None\, full=False\, w=None\, cov=False)","Least squares polynomial fit."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyfit.html#numpy.polynomial.polynomial.polyfit","numpy.polynomial.polynomial.polyfit","numpy.polynomial.polynomial.polyfit(x\, y\, deg\, rcond=None\, full=False\, w=None)","Least-squares fit of a polynomial to data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyfromroots.html#numpy.polynomial.polynomial.polyfromroots","numpy.polynomial.polynomial.polyfromroots","numpy.polynomial.polynomial.polyfromroots(roots)","Generate a monic polynomial with given roots."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polygrid2d.html#numpy.polynomial.polynomial.polygrid2d","numpy.polynomial.polynomial.polygrid2d","numpy.polynomial.polynomial.polygrid2d(x\, y\, c)","Evaluate a 2-D polynomial on the Cartesian product of x and y."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polygrid3d.html#numpy.polynomial.polynomial.polygrid3d","numpy.polynomial.polynomial.polygrid3d","numpy.polynomial.polynomial.polygrid3d(x\, y\, z\, c)","Evaluate a 3-D polynomial on the Cartesian product of x\, y and z."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyint.html#numpy.polyint","numpy.polyint","numpy.polyint(p\, m=1\, k=None)","Return an antiderivative (indefinite integral) of a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyint.html#numpy.polynomial.polynomial.polyint","numpy.polynomial.polynomial.polyint","numpy.polynomial.polynomial.polyint(c\, m=1\, k=[]\, lbnd=0\, scl=1\, axis=0)","Integrate a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyline.html#numpy.polynomial.polynomial.polyline","numpy.polynomial.polynomial.polyline","numpy.polynomial.polynomial.polyline(off\, scl)","Returns an array representing a linear polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polymul.html#numpy.polymul","numpy.polymul","numpy.polymul(a1\, a2)","Find the product of two polynomials."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polymul.html#numpy.polynomial.polynomial.polymul","numpy.polynomial.polynomial.polymul","numpy.polynomial.polynomial.polymul(c1\, c2)","Multiply one polynomial by another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polymulx.html#numpy.polynomial.polynomial.polymulx","numpy.polynomial.polynomial.polymulx","numpy.polynomial.polynomial.polymulx(c)","Multiply a polynomial by x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyone.html#numpy.polynomial.polynomial.polyone","numpy.polynomial.polynomial.polyone = array","numpy.polynomial.polynomial.polyone = array([1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polypow.html#numpy.polynomial.polynomial.polypow","numpy.polynomial.polynomial.polypow","numpy.polynomial.polynomial.polypow(c\, pow\, maxpower=None)","Raise a polynomial to a power."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyroots.html#numpy.polynomial.polynomial.polyroots","numpy.polynomial.polynomial.polyroots","numpy.polynomial.polynomial.polyroots(c)","Compute the roots of a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polysub.html#numpy.polysub","numpy.polysub","numpy.polysub(a1\, a2)","Difference (subtraction) of two polynomials."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polysub.html#numpy.polynomial.polynomial.polysub","numpy.polynomial.polynomial.polysub","numpy.polynomial.polynomial.polysub(c1\, c2)","Subtract one polynomial from another."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polytrim.html#numpy.polynomial.polynomial.polytrim","numpy.polynomial.polynomial.polytrim","numpy.polynomial.polynomial.polytrim(c\, tol=0)","Remove “small” “trailing” coefficients from a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyval.html#numpy.polyval","numpy.polyval","numpy.polyval(p\, x)","Evaluate a polynomial at specific values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyval.html#numpy.polynomial.polynomial.polyval","numpy.polynomial.polynomial.polyval","numpy.polynomial.polynomial.polyval(x\, c\, tensor=True)","Evaluate a polynomial at points x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyval2d.html#numpy.polynomial.polynomial.polyval2d","numpy.polynomial.polynomial.polyval2d","numpy.polynomial.polynomial.polyval2d(x\, y\, c)","Evaluate a 2-D polynomial at points (x\, y)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyval3d.html#numpy.polynomial.polynomial.polyval3d","numpy.polynomial.polynomial.polyval3d","numpy.polynomial.polynomial.polyval3d(x\, y\, z\, c)","Evaluate a 3-D polynomial at points (x\, y\, z)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyvalfromroots.html#numpy.polynomial.polynomial.polyvalfromroots","numpy.polynomial.polynomial.polyvalfromroots","numpy.polynomial.polynomial.polyvalfromroots(x\, r\, tensor=True)","Evaluate a polynomial specified by its roots at points x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyvander.html#numpy.polynomial.polynomial.polyvander","numpy.polynomial.polynomial.polyvander","numpy.polynomial.polynomial.polyvander(x\, deg)","Vandermonde matrix of given degree."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyvander2d.html#numpy.polynomial.polynomial.polyvander2d","numpy.polynomial.polynomial.polyvander2d","numpy.polynomial.polynomial.polyvander2d(x\, y\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyvander3d.html#numpy.polynomial.polynomial.polyvander3d","numpy.polynomial.polynomial.polyvander3d","numpy.polynomial.polynomial.polyvander3d(x\, y\, z\, deg)","Pseudo-Vandermonde matrix of given degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyx.html#numpy.polynomial.polynomial.polyx","numpy.polynomial.polynomial.polyx = array","numpy.polynomial.polynomial.polyx = array([0\, 1])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polynomial.polyzero.html#numpy.polynomial.polynomial.polyzero","numpy.polynomial.polynomial.polyzero = array","numpy.polynomial.polynomial.polyzero = array([0])",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.positive.html#numpy.positive","numpy.positive","numpy.positive(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'positive'>","Numerical positive\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.power.html#numpy.power","numpy.power","numpy.power(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'power'>","First array elements raised to powers from second array\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.power.html#numpy.ma.power","numpy.ma.power","numpy.ma.power(a\, b\, third=None)","Returns element-wise base array raised to power from second array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ppmt.html#numpy.ppmt","numpy.ppmt","numpy.ppmt(rate\, per\, nper\, pv\, fv=0\, when='end')","Compute the payment against loan principal."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.printoptions.html#numpy.printoptions","numpy.printoptions","numpy.printoptions(*args\, **kwargs)","Context manager for setting print options."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.prod.html#numpy.ma.prod","numpy.ma.prod","numpy.ma.prod(self\, axis=None\, dtype=None\, out=None\, keepdims=<no value>) = <numpy.ma.core._frommethod object>","Return the product of the array elements over the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html#numpy.prod","numpy.prod","numpy.prod(a\, axis=None\, dtype=None\, out=None\, keepdims=<no value>\, initial=<no value>\, where=<no value>)","Return the product of array elements over a given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.promote_types.html#numpy.promote_types","numpy.promote_types","numpy.promote_types(type1\, type2)","Returns the data type with the smallest size and smallest scalar kind to which both type1 and type2 may be safely cast. The returned data type is always in native byte order."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ptp.html#numpy.ptp","numpy.ptp","numpy.ptp(a\, axis=None\, out=None\, keepdims=<no value>)","Range of values (maximum - minimum) along an axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.ptp.html#numpy.ma.ptp","numpy.ma.ptp","numpy.ma.ptp(obj\, axis=None\, out=None\, fill_value=None\, keepdims=<no value>)","Return (maximum - minimum) along the given dimension (i.e. peak-to-peak value)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.put.html#numpy.put","numpy.put","numpy.put(a\, ind\, v\, mode='raise')","Replaces specified elements of an array with given values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.put_along_axis.html#numpy.put_along_axis","numpy.put_along_axis","numpy.put_along_axis(arr\, indices\, values\, axis)","Put values into the destination array by matching 1d index and data slices."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.putmask.html#numpy.putmask","numpy.putmask","numpy.putmask(a\, mask\, values)","Changes elements of an array based on conditional and input values."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.pv.html#numpy.pv","numpy.pv","numpy.pv(rate\, nper\, pmt\, fv=0\, when='end')","Compute the present value."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.qr.html#numpy.linalg.qr","numpy.linalg.qr","numpy.linalg.qr(a\, mode='reduced')","Compute the qr factorization of a matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.quantile.html#numpy.quantile","numpy.quantile","numpy.quantile(a\, q\, axis=None\, out=None\, overwrite_input=False\, interpolation='linear'\, keepdims=False)","Compute the q-th quantile of the data along the specified axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rad2deg.html#numpy.rad2deg","numpy.rad2deg","numpy.rad2deg(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'rad2deg'>","Convert angles from radians to degrees."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.radians.html#numpy.radians","numpy.radians","numpy.radians(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'radians'>","Convert angles from degrees to radians."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.rand.html#numpy.matlib.rand","numpy.matlib.rand","numpy.matlib.rand(*args)","Return a matrix of random values with given shape."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.randn.html#numpy.matlib.randn","numpy.matlib.randn","numpy.matlib.randn(*args)","Return a random matrix with data from the “standard normal” distribution."
"https://docs.scipy.org/doc/numpy/reference/random/entropy.html#numpy.random.entropy.random_entropy","numpy.random.entropy.random_entropy","numpy.random.entropy.random_entropy(size=None\, source='system')","Read entropy from the system cryptographic provider"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rate.html#numpy.rate","numpy.rate","numpy.rate(nper\, pmt\, pv\, fv\, when='end'\, guess=None\, tol=None\, maxiter=100)","Compute the rate of interest per period."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.ravel.html#numpy.ma.ravel","numpy.ma.ravel","numpy.ma.ravel(self\, order='C') = <numpy.ma.core._frommethod object>","Returns a 1D version of self\, as a view."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html#numpy.ravel","numpy.ravel","numpy.ravel(a\, order='C')","Return a contiguous flattened array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index","numpy.ravel_multi_index","numpy.ravel_multi_index(multi_index\, dims\, mode='raise'\, order='C')","Converts a tuple of index arrays into an array of flat indices\, applying boundary modes to the multi-index."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.real.html#numpy.real","numpy.real","numpy.real(val)","Return the real part of the complex argument."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.real_if_close.html#numpy.real_if_close","numpy.real_if_close","numpy.real_if_close(a\, tol=100)","If complex input returns a real array if complex parts are close to zero."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.rec_append_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.rec_drop_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.rec_join","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.reciprocal.html#numpy.reciprocal","numpy.reciprocal","numpy.reciprocal(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'reciprocal'>","Return the reciprocal of the argument\, element-wise."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.recursive_fill_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.red_text.html#numpy.distutils.misc_util.red_text","numpy.distutils.misc_util.red_text","numpy.distutils.misc_util.red_text(s)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.remainder.html#numpy.remainder","numpy.remainder","numpy.remainder(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'remainder'>","Return element-wise remainder of division."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.rename_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.repack_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html#numpy.repeat","numpy.repeat","numpy.repeat(a\, repeats\, axis=None)","Repeat elements of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.replace.html#numpy.char.replace","numpy.char.replace","numpy.char.replace(a\, old\, new\, count=None)","For each element in a\, return a copy of the string with all occurrences of substring old replaced by new."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.repmat.html#numpy.matlib.repmat","numpy.matlib.repmat","numpy.matlib.repmat(a\, m\, n)","Repeat a 0-D to 2-D array or matrix MxN times."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.require.html#numpy.require","numpy.require","numpy.require(a\, dtype=None\, requirements=None)","Return an ndarray of the provided type that satisfies requirements."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.require_fields","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html#numpy.reshape","numpy.reshape","numpy.reshape(a\, newshape\, order='C')","Gives a new shape to an array without changing its data."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.reshape.html#numpy.ma.reshape","numpy.ma.reshape","numpy.ma.reshape(a\, new_shape\, order='C')","Returns an array containing the same data with a new shape."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.resize.html#numpy.resize","numpy.resize","numpy.resize(a\, new_shape)","Return a new array with the specified shape."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.resize.html#numpy.ma.resize","numpy.ma.resize","numpy.ma.resize(x\, new_shape)","Return a new masked array with the specified size and shape."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.result_type.html#numpy.result_type","numpy.result_type","numpy.result_type(*arrays_and_dtypes)","Returns the type that results from applying the NumPy type promotion rules to the arguments."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfft.html#numpy.fft.rfft","numpy.fft.rfft","numpy.fft.rfft(a\, n=None\, axis=-1\, norm=None)","Compute the one-dimensional discrete Fourier Transform for real input."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfft2.html#numpy.fft.rfft2","numpy.fft.rfft2","numpy.fft.rfft2(a\, s=None\, axes=(-2\, -1)\, norm=None)","Compute the 2-dimensional FFT of a real array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfftfreq.html#numpy.fft.rfftfreq","numpy.fft.rfftfreq","numpy.fft.rfftfreq(n\, d=1.0)","Return the Discrete Fourier Transform sample frequencies (for usage with rfft\, irfft)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.rfftn.html#numpy.fft.rfftn","numpy.fft.rfftn","numpy.fft.rfftn(a\, s=None\, axes=None\, norm=None)","Compute the N-dimensional discrete Fourier Transform for real input."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rfind.html#numpy.char.rfind","numpy.char.rfind","numpy.char.rfind(a\, sub\, start=0\, end=None)","For each element in a\, return the highest index in the string where substring sub is found\, such that sub is contained within [start\, end]."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.right_shift.html#numpy.right_shift","numpy.right_shift","numpy.right_shift(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'right_shift'>","Shift the bits of an integer to the right."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rindex.html#numpy.char.rindex","numpy.char.rindex","numpy.char.rindex(a\, sub\, start=0\, end=None)","Like rfind\, but raises ValueError when the substring sub is not found."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rint.html#numpy.rint","numpy.rint","numpy.rint(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'rint'>","Round elements of the array to the nearest integer."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rjust.html#numpy.char.rjust","numpy.char.rjust","numpy.char.rjust(a\, width\, fillchar=' ')","Return an array with the elements of a right-justified in a string of length width."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.roll.html#numpy.roll","numpy.roll","numpy.roll(a\, shift\, axis=None)","Roll array elements along a given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rollaxis.html#numpy.rollaxis","numpy.rollaxis","numpy.rollaxis(a\, axis\, start=0)","Roll the specified axis backwards\, until it lies in a given position."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.roots.html#numpy.roots","numpy.roots","numpy.roots(p)","Return the roots of a polynomial with coefficients given in p."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.rot90.html#numpy.rot90","numpy.rot90","numpy.rot90(m\, k=1\, axes=(0\, 1))","Rotate an array by 90 degrees in the plane specified by axes."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.round.html#numpy.ma.round","numpy.ma.round","numpy.ma.round(a\, decimals=0\, out=None)","Return a copy of a\, rounded to ‘decimals’ places."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.round_.html#numpy.round_","numpy.round_","numpy.round_(a\, decimals=0\, out=None)","Round an array to the given number of decimals."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.row_stack.html#numpy.ma.row_stack","numpy.ma.row_stack","numpy.ma.row_stack(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","Stack arrays in sequence vertically (row wise). This is equivalent to concatenation along the first axis after 1-D arrays of shape (N\,) have been reshaped to (1\,N). Rebuilds arrays divided by vsplit. This function makes most sense for arrays with up to 3 dimensions. For instance\, for pixel-data with a height (first axis)\, width (second axis)\, and r/g/b channels (third axis). The functions concatenate\, stack and block provide more general stacking and concatenation operations. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rpartition.html#numpy.char.rpartition","numpy.char.rpartition","numpy.char.rpartition(a\, sep)","Partition (split) each element around the right-most separator."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rsplit.html#numpy.char.rsplit","numpy.char.rsplit","numpy.char.rsplit(a\, sep=None\, maxsplit=None)","For each element in a\, return a list of the words in the string\, using sep as the delimiter string."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.rstrip.html#numpy.char.rstrip","numpy.char.rstrip","numpy.char.rstrip(a\, chars=None)","For each element in a\, return a copy with the trailing characters removed."
"https://docs.scipy.org/doc/numpy/f2py/usage.html#numpy.f2py.run_main","numpy.f2py.run_main","numpy.f2py.run_main(comline_list)","Equivalent to running:"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.run_module_suite.html#numpy.testing.run_module_suite","numpy.testing.run_module_suite","numpy.testing.run_module_suite(file_to_run=None\, argv=None)","Run a test module."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.rundocs.html#numpy.testing.rundocs","numpy.testing.rundocs","numpy.testing.rundocs(filename=None\, raise_on_error=True)","Run doctests found in the given file."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.save.html#numpy.save","numpy.save","numpy.save(file\, arr\, allow_pickle=True\, fix_imports=True)","Save an array to a binary file in NumPy .npy format."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html#numpy.savetxt","numpy.savetxt","numpy.savetxt(fname\, X\, fmt='%.18e'\, delimiter=' '\, newline='n'\, header=''\, footer=''\, comments='# '\, encoding=None)","Save an array to a text file."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez.html#numpy.savez","numpy.savez","numpy.savez(file\, *args\, **kwds)","Save several arrays into a single file in uncompressed .npz format."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez_compressed.html#numpy.savez_compressed","numpy.savez_compressed","numpy.savez_compressed(file\, *args\, **kwds)","Save several arrays into a single file in compressed .npz format."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sctype2char.html#numpy.sctype2char","numpy.sctype2char","numpy.sctype2char(sctype)","Return the string representation of a scalar dtype."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html#numpy.searchsorted","numpy.searchsorted","numpy.searchsorted(a\, v\, side='left'\, sorter=None)","Find indices where elements should be inserted to maintain order."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html#numpy.select","numpy.select","numpy.select(condlist\, choicelist\, default=0)","Return an array drawn from elements in choicelist\, depending on conditions."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value","numpy.ma.set_fill_value","numpy.ma.set_fill_value(a\, fill_value)","Set the filling value of a\, if a is a masked array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html#numpy.set_printoptions","numpy.set_printoptions","numpy.set_printoptions(precision=None\, threshold=None\, edgeitems=None\, linewidth=None\, suppress=None\, nanstr=None\, infstr=None\, formatter=None\, sign=None\, floatmode=None\, **kwarg)","Set printing options."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.set_string_function.html#numpy.set_string_function","numpy.set_string_function","numpy.set_string_function(f\, repr=True)","Set a Python function to be used when pretty printing arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.log.set_verbosity.html#numpy.distutils.log.set_verbosity","numpy.distutils.log.set_verbosity","numpy.distutils.log.set_verbosity(v\, force=False)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.decorators.setastest.html#numpy.testing.decorators.setastest","numpy.testing.decorators.setastest","numpy.testing.decorators.setastest(tf=True)","Signals to nose that this function is or is not a test."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.setbufsize.html#numpy.setbufsize","numpy.setbufsize","numpy.setbufsize(size)","Set the size of the buffer used in ufuncs."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.setdiff1d.html#numpy.setdiff1d","numpy.setdiff1d","numpy.setdiff1d(ar1\, ar2\, assume_unique=False)","Find the set difference of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.seterr.html#numpy.seterr","numpy.seterr","numpy.seterr(all=None\, divide=None\, over=None\, under=None\, invalid=None)","Set how floating-point errors are handled."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.seterrcall.html#numpy.seterrcall","numpy.seterrcall","numpy.seterrcall(func)","Set the floating-point error callback function or log object."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.seterrobj.html#numpy.seterrobj","numpy.seterrobj","numpy.seterrobj(errobj)","Set the object that defines floating-point error handling."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.setxor1d.html#numpy.setxor1d","numpy.setxor1d","numpy.setxor1d(ar1\, ar2\, assume_unique=False)","Find the set exclusive-or of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.shape.html#numpy.ma.shape","numpy.ma.shape","numpy.ma.shape(obj)","Return the shape of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.shares_memory.html#numpy.shares_memory","numpy.shares_memory","numpy.shares_memory(a\, b\, max_work=None)","Determine if two arrays share memory"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sign.html#numpy.sign","numpy.sign","numpy.sign(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'sign'>","Returns an element-wise indication of the sign of a number."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.signbit.html#numpy.signbit","numpy.signbit","numpy.signbit(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'signbit'>","Returns element-wise True where signbit is set (less than zero)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sin.html#numpy.sin","numpy.sin","numpy.sin(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'sin'>","Trigonometric sine\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sinc.html#numpy.sinc","numpy.sinc","numpy.sinc(x)","Return the sinc function."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sinh.html#numpy.sinh","numpy.sinh","numpy.sinh(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'sinh'>","Hyperbolic sine\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.size.html#numpy.ma.size","numpy.ma.size","numpy.ma.size(obj\, axis=None)","Return the number of elements along a given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.decorators.skipif.html#numpy.testing.decorators.skipif","numpy.testing.decorators.skipif","numpy.testing.decorators.skipif(skip_condition\, msg=None)","Make function raise SkipTest exception if a given condition is true."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.slogdet.html#numpy.linalg.slogdet","numpy.linalg.slogdet","numpy.linalg.slogdet(a)","Compute the sign and (natural) logarithm of the determinant of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.decorators.slow.html#numpy.testing.decorators.slow","numpy.testing.decorators.slow","numpy.testing.decorators.slow(t)","Label a test as ‘slow’."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask","numpy.ma.soften_mask","numpy.ma.soften_mask(self) = <numpy.ma.core._frommethod object>","Force the mask to soft."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.solve.html#numpy.linalg.solve","numpy.linalg.solve","numpy.linalg.solve(a\, b)","Solve a linear matrix equation\, or system of linear scalar equations."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html#numpy.sort","numpy.sort","numpy.sort(a\, axis=-1\, kind=None\, order=None)","Return a sorted copy of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.sort.html#numpy.ma.sort","numpy.ma.sort","numpy.ma.sort(a\, axis=-1\, kind=None\, order=None\, endwith=True\, fill_value=None)","Sort the array\, in-place"
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort_complex.html#numpy.sort_complex","numpy.sort_complex","numpy.sort_complex(a)","Sort a complex array using the real part first\, then the imaginary part."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.source.html#numpy.source","numpy.source","numpy.source(object\, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>)","Print or write to a file the source code for a NumPy object."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.spacing.html#numpy.spacing","numpy.spacing","numpy.spacing(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'spacing'>","Return the distance between x and the nearest adjacent number."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.split.html#numpy.split","numpy.split","numpy.split(ary\, indices_or_sections\, axis=0)","Split an array into multiple sub-arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.split.html#numpy.char.split","numpy.char.split","numpy.char.split(a\, sep=None\, maxsplit=None)","For each element in a\, return a list of the words in the string\, using sep as the delimiter string."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.splitlines.html#numpy.char.splitlines","numpy.char.splitlines","numpy.char.splitlines(a\, keepends=None)","For each element in a\, return a list of the lines in the element\, breaking at line boundaries."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sqrt.html#numpy.sqrt","numpy.sqrt","numpy.sqrt(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'sqrt'>","Return the non-negative square-root of an array\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.square.html#numpy.square","numpy.square","numpy.square(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'square'>","Return the element-wise square of the input."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html#numpy.squeeze","numpy.squeeze","numpy.squeeze(a\, axis=None)","Remove single-dimensional entries from the shape of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.squeeze.html#numpy.ma.squeeze","numpy.ma.squeeze","numpy.ma.squeeze(a\, axis=None)","Remove single-dimensional entries from the shape of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.stack.html#numpy.ma.stack","numpy.ma.stack","numpy.ma.stack(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","Join a sequence of arrays along a new axis. The axis parameter specifies the index of the new axis in the dimensions of the result. For example\, if axis=0 it will be the first dimension and if axis=-1 it will be the last dimension.  New in version 1.10.0.  "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.stack.html#numpy.stack","numpy.stack","numpy.stack(arrays\, axis=0\, out=None)","Join a sequence of arrays along a new axis."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.stack_arrays","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.startswith.html#numpy.char.startswith","numpy.char.startswith","numpy.char.startswith(a\, prefix\, start=0\, end=None)","Returns a boolean array which is True where the string element in a starts with prefix\, otherwise False."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.std.html#numpy.ma.std","numpy.ma.std","numpy.ma.std(self\, axis=None\, dtype=None\, out=None\, ddof=0\, keepdims=<no value>) = <numpy.ma.core._frommethod object>","Returns the standard deviation of the array elements along given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html#numpy.std","numpy.std","numpy.std(a\, axis=None\, dtype=None\, out=None\, ddof=0\, keepdims=<no value>)","Compute the standard deviation along the specified axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.str_len.html#numpy.char.str_len","numpy.char.str_len","numpy.char.str_len(a)","Return len(a) element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.strip.html#numpy.char.strip","numpy.char.strip","numpy.char.strip(a\, chars=None)","For each element in a\, return a copy with the leading and trailing characters removed."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.structured_to_unstructured","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.subtract.html#numpy.subtract","numpy.subtract","numpy.subtract(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'subtract'>","Subtract arguments\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.sum.html#numpy.ma.sum","numpy.ma.sum","numpy.ma.sum(self\, axis=None\, dtype=None\, out=None\, keepdims=<no value>) = <numpy.ma.core._frommethod object>","Return the sum of the array elements over the given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html#numpy.sum","numpy.sum","numpy.sum(a\, axis=None\, dtype=None\, out=None\, keepdims=<no value>\, initial=<no value>\, where=<no value>)","Sum of array elements over a given axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.svd.html#numpy.linalg.svd","numpy.linalg.svd","numpy.linalg.svd(a\, full_matrices=True\, compute_uv=True\, hermitian=False)","Singular Value Decomposition."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes","numpy.ma.swapaxes","numpy.ma.swapaxes(self\, *args\, **params) a.swapaxes(axis1\, axis2) = <numpy.ma.core._frommethod object>","Return a view of the array with axis1 and axis2 interchanged. Refer to numpy.swapaxes for full documentation. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.swapaxes.html#numpy.swapaxes","numpy.swapaxes","numpy.swapaxes(a\, axis1\, axis2)","Interchange two axes of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.swapcase.html#numpy.char.swapcase","numpy.char.swapcase","numpy.char.swapcase(a)","Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.take.html#numpy.take","numpy.take","numpy.take(a\, indices\, axis=None\, out=None\, mode='raise')","Take elements from an array along an axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.take_along_axis.html#numpy.take_along_axis","numpy.take_along_axis","numpy.take_along_axis(arr\, indices\, axis)","Take values from the input array by matching 1d index and data slices."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tan.html#numpy.tan","numpy.tan","numpy.tan(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'tan'>","Compute tangent element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tanh.html#numpy.tanh","numpy.tanh","numpy.tanh(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'tanh'>","Compute hyperbolic tangent element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html#numpy.tensordot","numpy.tensordot","numpy.tensordot(a\, b\, axes=2)","Compute tensor dot product along specified axes."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.tensorinv.html#numpy.linalg.tensorinv","numpy.linalg.tensorinv","numpy.linalg.tensorinv(a\, ind=2)","Compute the ‘inverse’ of an N-dimensional array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.tensorsolve.html#numpy.linalg.tensorsolve","numpy.linalg.tensorsolve","numpy.linalg.tensorsolve(a\, b\, axes=None)","Solve the tensor equation a x = b for x."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.terminal_has_colors.html#numpy.distutils.misc_util.terminal_has_colors","numpy.distutils.misc_util.terminal_has_colors","numpy.distutils.misc_util.terminal_has_colors()",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html#numpy.tile","numpy.tile","numpy.tile(A\, reps)","Construct an array by repeating A the number of times given by reps."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.title.html#numpy.char.title","numpy.char.title","numpy.char.title(a)","Return element-wise title cased version of string or unicode."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.trace.html#numpy.ma.trace","numpy.ma.trace","numpy.ma.trace(self\, offset=0\, axis1=0\, axis2=1\, dtype=None\, out=None) a.trace(offset=0\, axis1=0\, axis2=1\, dtype=None\, out=None) = <numpy.ma.core._frommethod object>","Return the sum along diagonals of the array. Refer to numpy.trace for full documentation. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.trace.html#numpy.trace","numpy.trace","numpy.trace(a\, offset=0\, axis1=0\, axis2=1\, dtype=None\, out=None)","Return the sum along diagonals of the array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.translate.html#numpy.char.translate","numpy.char.translate","numpy.char.translate(a\, table\, deletechars=None)","For each element in a\, return a copy of the string where all characters occurring in the optional argument deletechars are removed\, and the remaining characters have been mapped through the given translation table."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.transpose.html#numpy.transpose","numpy.transpose","numpy.transpose(a\, axes=None)","Permute the dimensions of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.transpose.html#numpy.ma.transpose","numpy.ma.transpose","numpy.ma.transpose(a\, axes=None)","Permute the dimensions of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.trapz.html#numpy.trapz","numpy.trapz","numpy.trapz(y\, x=None\, dx=1.0\, axis=-1)","Integrate along the given axis using the composite trapezoidal rule."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tri.html#numpy.tri","numpy.tri","numpy.tri(N\, M=None\, k=0\, dtype=<class 'float'>)","An array with ones at and below the given diagonal and zeros elsewhere."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tril.html#numpy.tril","numpy.tril","numpy.tril(m\, k=0)","Lower triangle of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tril_indices.html#numpy.tril_indices","numpy.tril_indices","numpy.tril_indices(n\, k=0\, m=None)","Return the indices for the lower-triangle of an (n\, m) array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tril_indices_from.html#numpy.tril_indices_from","numpy.tril_indices_from","numpy.tril_indices_from(arr\, k=0)","Return the indices for the lower-triangle of arr."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.trim_zeros.html#numpy.trim_zeros","numpy.trim_zeros","numpy.trim_zeros(filt\, trim='fb')","Trim the leading and/or trailing zeros from a 1-D array or sequence."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.trimcoef.html#numpy.polynomial.polyutils.trimcoef","numpy.polynomial.polyutils.trimcoef","numpy.polynomial.polyutils.trimcoef(c\, tol=0)","Remove “small” “trailing” coefficients from a polynomial."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.polynomial.polyutils.trimseq.html#numpy.polynomial.polyutils.trimseq","numpy.polynomial.polyutils.trimseq","numpy.polynomial.polyutils.trimseq(seq)","Remove small Poly series coefficients."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.triu.html#numpy.triu","numpy.triu","numpy.triu(m\, k=0)","Upper triangle of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.triu_indices.html#numpy.triu_indices","numpy.triu_indices","numpy.triu_indices(n\, k=0\, m=None)","Return the indices for the upper-triangle of an (n\, m) array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.triu_indices_from.html#numpy.triu_indices_from","numpy.triu_indices_from","numpy.triu_indices_from(arr\, k=0)","Return the indices for the upper-triangle of arr."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.true_divide.html#numpy.true_divide","numpy.true_divide","numpy.true_divide(x1\, x2\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'true_divide'>","Returns a true division of the inputs\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.trunc.html#numpy.trunc","numpy.trunc","numpy.trunc(x\, /\, out=None\, *\, where=True\, casting='same_kind'\, order='K'\, dtype=None\, subok=True[\, signature\, extobj]) = <ufunc 'trunc'>","Return the truncated value of the input\, element-wise."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.typename.html#numpy.typename","numpy.typename","numpy.typename(char)","Return a description for the given data type code."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.union1d.html#numpy.union1d","numpy.union1d","numpy.union1d(ar1\, ar2)","Find the union of two arrays."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html#numpy.unique","numpy.unique","numpy.unique(ar\, return_index=False\, return_inverse=False\, return_counts=False\, axis=None)","Find the unique elements of an array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.unpackbits.html#numpy.unpackbits","numpy.unpackbits","numpy.unpackbits(a\, axis=None\, count=None\, bitorder='big')","Unpacks elements of a uint8 array into a binary-valued output array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html#numpy.unravel_index","numpy.unravel_index","numpy.unravel_index(indices\, shape\, order='C')","Converts a flat index or array of flat indices into a tuple of coordinate arrays."
"https://docs.scipy.org/doc/numpy/user/basics.rec.html#numpy.lib.recfunctions.unstructured_to_structured","numpy.lib.recfunctions.append_fields","numpy.lib.recfunctions.append_fields(base\, names\, data\, dtypes=None\, fill_value=-1\, usemask=True\, asrecarray=False)","Add new fields to an existing array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.unwrap.html#numpy.unwrap","numpy.unwrap","numpy.unwrap(p\, discont=3.141592653589793\, axis=-1)","Unwrap by changing deltas between values to 2*pi complement."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.upper.html#numpy.char.upper","numpy.char.upper","numpy.char.upper(a)","Return an array with the elements converted to uppercase."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vander.html#numpy.vander","numpy.vander","numpy.vander(x\, N=None\, increasing=False)","Generate a Vandermonde matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.vander.html#numpy.ma.vander","numpy.ma.vander","numpy.ma.vander(x\, n=None)","Generate a Vandermonde matrix."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.var.html#numpy.ma.var","numpy.ma.var","numpy.ma.var(self\, axis=None\, dtype=None\, out=None\, ddof=0\, keepdims=<no value>) = <numpy.ma.core._frommethod object>","Compute the variance along the specified axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html#numpy.var","numpy.var","numpy.var(a\, axis=None\, dtype=None\, out=None\, ddof=0\, keepdims=<no value>)","Compute the variance along the specified axis."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vdot.html#numpy.vdot","numpy.vdot","numpy.vdot(a\, b)","Return the dot product of two vectors."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vsplit.html#numpy.vsplit","numpy.vsplit","numpy.vsplit(ary\, indices_or_sections)","Split an array into multiple sub-arrays vertically (row-wise)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.vstack.html#numpy.ma.vstack","numpy.ma.vstack","numpy.ma.vstack(*args\, **kwargs) = <numpy.ma.extras._fromnxfunction_seq object>","Stack arrays in sequence vertically (row wise). This is equivalent to concatenation along the first axis after 1-D arrays of shape (N\,) have been reshaped to (1\,N). Rebuilds arrays divided by vsplit. This function makes most sense for arrays with up to 3 dimensions. For instance\, for pixel-data with a height (first axis)\, width (second axis)\, and r/g/b channels (third axis). The functions concatenate\, stack and block provide more general stacking and concatenation operations. "
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html#numpy.vstack","numpy.vstack","numpy.vstack(tup)","Stack arrays in sequence vertically (row wise)."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html#numpy.where","numpy.where","numpy.where(condition[\, x\, y])","Return elements chosen from x or y depending on condition."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.where.html#numpy.ma.where","numpy.ma.where","numpy.ma.where(condition\, x=<no value>\, y=<no value>)","Return a masked array with elements from x or y\, depending on condition."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.distutils.misc_util.yellow_text.html#numpy.distutils.misc_util.yellow_text","numpy.distutils.misc_util.yellow_text","numpy.distutils.misc_util.yellow_text(s)",""
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.zeros.html#numpy.ma.zeros","numpy.ma.zeros","numpy.ma.zeros(shape\, dtype=float\, order='C') = <numpy.ma.core._convert2ma object>","Return a new array of given shape and type\, filled with zeros."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html#numpy.zeros","numpy.zeros","numpy.zeros(shape\, dtype=float\, order='C')","Return a new array of given shape and type\, filled with zeros."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matlib.zeros.html#numpy.matlib.zeros","numpy.matlib.zeros","numpy.matlib.zeros(shape\, dtype=None\, order='C')","Return a matrix of given shape and type\, filled with zeros."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros_like.html#numpy.zeros_like","numpy.zeros_like","numpy.zeros_like(a\, dtype=None\, order='K'\, subok=True\, shape=None)","Return an array of zeros with the same shape and type as a given array."
"https://docs.scipy.org/doc/numpy/reference/generated/numpy.char.zfill.html#numpy.char.zfill","numpy.char.zfill","numpy.char.zfill(a\, width)","Return the numeric string left-filled with zeros"
